{"version":3,"sources":["redux/sortingVisualizerReducer.js","redux/store.js","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizerX/SortingVisualizer.jsx","containers/SortingVisualizerContainer.js","SortingVisualizerX/Navbar.jsx","containers/NavbarContainer.js","App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["initialState","unsortedArray","shuffleArray","startSort","isArraySorted","randomAlgoClicks","isDarkTheme","primaryColor","secondaryColor","sortedColor","defaultColor","backgroundColor","appBackgroundColor","algoButtonBg","algoButtonColor","algoButtonSelectedBg","algoButtonSelectedColor","titleColor","min","max","array","i","push","Math","floor","random","sortingVisualizerReducer","state","action","type","Object","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getHeapSortAnimations","animations","arr","length","k","heapify","heapSort","largest","left","right","getMergeSortAnimations","auxiliaryArray","mergeSort","mainArray","startIdx","endIdx","middleIdx","j","merge","getQuickSortAnimations","quickSort","items","index","pivotIndex","pivot","swap","partition","leftIndex","rightIndex","temp","algorithmArray","randomIntFromInterval","SortingVisualizer","props","selectionSort","Algo","componentRef","current","arrayBars","getElementsByClassName","setTimeout","barOneIdx","barOneHeight","barTwoIdx","barTwoHeight","barOneStyle","style","barTwoStyle","height","bubbleSort","sortedNumbers","n","barsIndex","color","handleClickAlgoButton","algo","algorithm","highlightAlgoButton","setState","getSortedArray","React","createRef","String","this","prevProps","prevState","console","error","newHeight","barStyle","buttons","id","completedArray","parseInt","jsSortedArray","sort","a","b","quickSorted","slice","log","arrayOne","arrayTwo","arraysAreEqual","className","data-test","ref","map","value","key","onClick","Component","connect","Navbar","randomizeAlgo","changeTheme","dispatch","App","NavbarContainer","SortingVisualizerContainer","Boolean","location","hostname","match","ReactDOM","render","store","AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4TAEMA,EAAe,CACnBC,cAAeC,IACfC,WAAW,EACXC,eAAe,EACfC,iBAAkB,EAClBC,aAAa,EACbC,aAAc,YACdC,eAAgB,SAChBC,YAAa,UACbC,aAAc,UACdC,gBAAiB,qBACjBC,mBAAoB,QACpBC,aAAc,UACdC,gBAAiB,UACjBC,qBAAsB,oBACtBC,wBAAyB,UACzBC,WAAY,sBAyCd,SAASf,IAGP,IAFA,IAS6BgB,EAAKC,EAT5BC,EAAQ,GAELC,EAAI,EAAGA,EA9DW,IA8DeA,IACxCD,EAAME,MAMqBJ,EANM,GAMDC,EANK,IAOhCI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,KAJpD,OAAOE,EAOMM,MApDkB,WAAmC,IAAlCC,EAAiC,uDAAzB3B,EAAc4B,EAAW,uCAC/D,OAAOA,EAAOC,MACZ,IAAK,mCACH,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC9B1B,cAAeC,IACfC,WAAW,EACXC,eAAe,IAEnB,IAAK,oCACH,OAAO0B,OAAOC,OAAO,GAAIJ,EAAO,CAC9BtB,iBAAkBsB,EAAMtB,iBAAiB,EACzCF,WAAW,IAEf,IAAK,gCACH,OAAO2B,OAAOC,OAAO,GAAIJ,EAAO,CAC9BxB,WAAW,EACXC,eAAe,IAEnB,IAAK,kCACH,OAAO0B,OAAOC,OAAO,GAAIJ,EAAO,CAC9BrB,aAAcqB,EAAMrB,YACpBC,aAAeoB,EAAMrB,YAA0B,YAAZ,UACnCE,eAAiBmB,EAAMrB,YAA0B,SAAZ,UACrCG,YAAckB,EAAMrB,YAA0B,UAAZ,UAClCI,aAAeiB,EAAMrB,YAA0B,UAAZ,UACnCK,gBAAkBgB,EAAMrB,YAAkC,qBAApB,kBACtCM,mBAAqBe,EAAMrB,YAA0B,QAAZ,UACzCO,aAAec,EAAMrB,YAA0B,UAAZ,UACnCQ,gBAAkBa,EAAMrB,YAA0B,UAAZ,UACtCS,qBAAuBY,EAAMrB,YAAmC,oBAArB,mBAC3CU,wBAA0BW,EAAMrB,YAAqC,UAAvB,qBAC9CW,WAAaU,EAAMrB,YAAoC,qBAAtB,sBAErC,QACE,OAAOqB,ICpDAK,cACXN,EACAO,OAAOC,8BAAgCD,OAAOC,gC,qECkC3C,SAASC,EAAsBf,GAClC,IAAMgB,EAAa,GAEnB,OAGJ,SAAkBC,EAAKD,GACnB,IAAIf,EAAIE,KAAKC,MAAMa,EAAIC,OAAS,EAAI,GAChCC,EAAIF,EAAIC,OAAS,EAErB,KAAOjB,GAAK,GACRmB,EAAQH,EAAKA,EAAIC,OAAQjB,EAAGe,GAC5Bf,IAGJ,KAAMkB,GAAK,GAAG,CAAC,IAAD,EACS,CAACF,EAAIE,GAAIF,EAAI,IAA/BA,EAAI,GADK,KACDA,EAAIE,GADH,KAEVH,EAAWd,KAAK,CAACiB,EAAGF,EAAIE,GAAI,EAAGF,EAAI,GAAI,IACvCG,EAAQH,EAAKE,EAAG,EAAGH,GACnBG,KAjBJE,CAASrB,EAAOgB,GACTA,EAsBX,SAASI,EAAQH,EAAKC,EAAQjB,EAAGe,GAC7B,IAAIM,EAAUrB,EACVsB,EAAW,EAAJtB,EAAQ,EACfuB,EAAQD,EAAO,EAYnB,GAVGA,EAAOL,GAAUD,EAAIM,GAAQN,EAAIK,KAChCA,EAAUC,EACVP,EAAWd,KAAK,CAACoB,EAASC,KAG3BC,EAAQN,GAAUD,EAAIO,GAASP,EAAIK,KAClCA,EAAUE,EACVR,EAAWd,KAAK,CAACoB,EAASE,KAG3BF,IAAYrB,EAAG,CACde,EAAWd,KAAK,CAACoB,EAASL,EAAIhB,GAAIA,EAAGgB,EAAIK,KAD3B,MAGW,CAACL,EAAIK,GAAUL,EAAIhB,IAA3CgB,EAAIhB,GAHS,KAGLgB,EAAIK,GAHC,KAIdF,EAAQH,EAAKC,EAAQI,EAASN,GAGlC,OAAOC,EAGJ,SAASQ,EAAuBzB,GACnC,GAAIA,EAAMkB,QAAU,EAAG,OAAOlB,EAE9B,IAAMgB,EAAa,GACbU,EAAc,YAAO1B,GAE3B,OAGJ,SAAS2B,EAAUC,EAAWC,EAAUC,EAAQJ,EAAgBV,GAC5D,GAAIa,IAAaC,EAAQ,OACzB,IAAMC,EAAY5B,KAAKC,OAAOyB,EAAWC,GAAU,GACnDH,EAAUD,EAAgBG,EAAUE,EAAWH,EAAWZ,GAC1DW,EAAUD,EAAgBK,EAAY,EAAGD,EAAQF,EAAWZ,GAIhE,SAAeY,EAAWC,EAAUE,EAAWD,EAAQJ,EAAgBV,GACnE,IAAIG,EAAIU,EACJ5B,EAAI4B,EACJG,EAAID,EAAY,EAEpB,GAAIH,EAAUV,OAAS,IAAOY,GAAU,IAAMD,EAAU,CACpD,KAAO5B,GAAK8B,GAAaC,GAAKF,GAC1Bd,EAAWd,KAAK,CAACD,EAAG+B,EAAG,IACvBhB,EAAWd,KAAK,CAACD,EAAG+B,EAAG,IAEnBN,EAAezB,IAAMyB,EAAeM,IACpChB,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,GAAI,IACvC2B,EAAUT,KAAOO,EAAezB,OAGhCe,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,GAAI,IACvCJ,EAAUT,KAAOO,EAAeM,MAIxC,KAAO/B,GAAK8B,GACRf,EAAWd,KAAK,CAACD,EAAGA,EAAG,IACvBe,EAAWd,KAAK,CAACD,EAAGA,EAAG,IACvBe,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,GAAI,IACvC2B,EAAUT,KAAOO,EAAezB,KAGpC,KAAO+B,GAAKF,GACRd,EAAWd,KAAK,CAAC8B,EAAGA,EAAG,IACvBhB,EAAWd,KAAK,CAAC8B,EAAGA,EAAG,IACvBhB,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,GAAI,IACvCJ,EAAUT,KAAOO,EAAeM,SAEjC,CACH,KAAO/B,GAAK8B,GAAaC,GAAKF,GAC1Bd,EAAWd,KAAK,CAACD,EAAG+B,IACpBhB,EAAWd,KAAK,CAACD,EAAG+B,IAEhBN,EAAezB,IAAMyB,EAAeM,IACpChB,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,KACnC2B,EAAUT,KAAOO,EAAezB,OAGhCe,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,KACnCJ,EAAUT,KAAOO,EAAeM,MAIxC,KAAO/B,GAAK8B,GACRf,EAAWd,KAAK,CAACD,EAAGA,IACpBe,EAAWd,KAAK,CAACD,EAAGA,IACpBe,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,KACnC2B,EAAUT,KAAOO,EAAezB,KAGpC,KAAO+B,GAAKF,GACRd,EAAWd,KAAK,CAAC8B,EAAGA,IACpBhB,EAAWd,KAAK,CAAC8B,EAAGA,IACpBhB,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,KACnCJ,EAAUT,KAAOO,EAAeM,MA9DxCC,CAAML,EAAWC,EAAUE,EAAWD,EAAQJ,EAAgBV,GAT9DW,CAAU3B,EAAO,EAAGA,EAAMkB,OAAS,EAAGQ,EAAgBV,GAC/CA,EA4EJ,SAASkB,EAAuBlC,GACnC,IAAMgB,EAAa,GAEnB,OAGJ,SAASmB,EAAUC,EAAOb,EAAMC,EAAOR,GACnC,IAAIqB,EAEAD,EAAMlB,OAAS,IACfmB,EAcR,SAAmBD,EAAOb,EAAMC,EAAOR,GACnC,IAAMsB,EAAanC,KAAKC,OAAOoB,EAAQD,GAAQ,GACzCgB,EAAQH,EAAME,GAChBrC,EAAIsB,EACJS,EAAIR,EAER,KAAOvB,GAAK+B,GAAG,CACX,KAAOI,EAAMnC,GAAKsC,GACdvB,EAAWd,KAAK,CAACD,EAAGqC,IACpBrC,IAGJ,KAAOmC,EAAMJ,GAAKO,GACdvB,EAAWd,KAAK,CAAC8B,EAAGM,IACpBN,IAGA/B,GAAK+B,IACLQ,EAAKJ,EAAOnC,EAAG+B,GACfhB,EAAWd,KAAK,CAACD,EAAGmC,EAAMnC,GAAI+B,EAAGI,EAAMJ,KACvC/B,IACA+B,KAGR,OAAO/B,EAtCKwC,CAAUL,EAAOb,EAAMC,EAAOR,GAElCO,EAAOc,EAAQ,GACfF,EAAUC,EAAOb,EAAMc,EAAQ,EAAGrB,GAGlCqB,EAAQb,GACRW,EAAUC,EAAOC,EAAOb,EAAOR,IAIvC,OAAOoB,EAnBPD,CAAUnC,EAAO,EAAGA,EAAMkB,OAAS,EAAGF,GAC/BA,EAgDX,SAASwB,EAAKJ,EAAOM,EAAWC,GAC5B,IAAMC,EAAOR,EAAMM,GACnBN,EAAMM,GAAaN,EAAMO,GACzBP,EAAMO,GAAcC,E,UC5NlBC,EAAiB,CAAC,gBAAiB,aAAc,YAAa,WAAY,aA2chF,SAASC,EAAsBhD,EAAKC,GAChC,OAAOI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,GA8BzCiD,M,YAteX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAsFVC,cAAgB,WAKZ,IAJA,IAAMjC,EDjGP,SAAoChB,GAGvC,IAFA,IAAMgB,EAAa,GAEXf,EAAI,EAAGA,EAAID,EAAMkB,OAAS,EAAGjB,IAAK,CAGtC,IAFA,IAAIH,EAAMG,EAEF+B,EAAI/B,EAAE,EAAG+B,EAAIhC,EAAMkB,OAAQc,IAC/BhB,EAAWd,KAAK,CAAC8B,EAAElC,IAEhBE,EAAMgC,GAAKhC,EAAMF,KAChBA,EAAMkC,GAGdQ,EAAKxC,EAAOC,EAAGH,GACfkB,EAAWd,KAAK,CAACD,EAAGD,EAAMC,GAAIH,EAAKE,EAAMF,KAG7C,OAAOkB,ECgFgBkC,CAAgC,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAEnFqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAH5B,WAKVrD,GACJ,GAA4B,IAAzBe,EAAWf,GAAGiB,OACbqC,YAAW,WAAO,IAAD,cAC8CvC,EAAWf,GADzD,GACNuD,EADM,KACKC,EADL,KACmBC,EADnB,KAC8BC,EAD9B,KAEPC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACzCD,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MAEAJ,YAAW,WACHC,EAAYE,EACZE,EAAYrE,gBAAkB,EAAKyD,MAAM3D,YAEzCyE,EAAYvE,gBAAkB,EAAKyD,MAAM3D,cA5G1C,GAgHJY,IAAMe,EAAWE,OAAQ,GACxBqC,YAAW,WACUF,EAAU,EAAKL,MAAMhD,MAAMkB,OAAO,GAAG2C,MAC7CtE,gBAAkB,EAAKyD,MAAM3D,cAnHvC,OAsHRY,OAEA,CAAC,IAAD,cAC4Be,EAAWf,GADvC,GACIuD,EADJ,KACeE,EADf,KAEGE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eACzC0E,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM7D,aACzC2E,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAnItC,OAqIRc,KAtCHA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IA5FO,EAuInB+D,WAAa,WAMT,IALA,IAAMhD,ED7HP,SAAiChB,GAGpC,IAFA,IAAMgB,EAAa,GAEXf,EAAI,EAAGA,EAAID,EAAMkB,OAAS,EAAGjB,IAGjC,IAFA,IAAMgE,EAAgBjE,EAAMkB,OAAS,EAAIjB,EAEjC+B,EAAI,EAAGA,EAAIiC,EAAejC,IAC9BhB,EAAWd,KAAK,CAAC8B,EAAEA,EAAE,IAElBhC,EAAMgC,EAAE,GAAKhC,EAAMgC,IAClBQ,EAAKxC,EAAOgC,EAAGA,EAAE,GAErBhB,EAAWd,KAAK,CAAC8B,EAAE,EAAGhC,EAAMgC,EAAE,GAAIA,EAAGhC,EAAMgC,KAC3ChB,EAAWd,KAAK,CAAC8B,EAAEA,EAAE,IAG7B,OAAOhB,EC6GgBkC,CAA6B,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAEhFqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAC3BY,EAAI,IAAKC,EAAY,IAJzB,WAMNlE,GAGL,GAFgBA,EAAI,IAAM,EAEP,CAAC,IAAD,cACgBe,EAAWf,GAD3B,GACRuD,EADQ,KACGE,EADH,KAETE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACnCO,EAAQnE,EAAI,IAAM,EAAI,EAAK+C,MAAM5D,eAAiB,EAAK4D,MAAM7D,aAEnEoE,YAAW,WACPK,EAAYrE,gBAAkB6E,EAC9BN,EAAYvE,gBAAkB6E,IA3JvB,EA4JRnE,EAAyB,QAG5BsD,YAAW,WAAO,IAAD,cAC8CvC,EAAWf,GADzD,GACNuD,EADM,KACKC,EADL,KACmBC,EADnB,KAC8BC,EAD9B,KAEPC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACzCD,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MAEGD,IAAcQ,GAAKV,IAAcU,IAChCX,YAAW,WACUF,EAAUc,KAAaN,MAC/BtE,gBAAkB,EAAKyD,MAAM3D,cAzKvC,GA4KQ,MAAN6E,GACDX,YAAW,WACUF,EAAU,GAAGQ,MACrBtE,gBAAkB,EAAKyD,MAAM3D,cA/K3C,QAmLRY,EAAuB,IAnCzBA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IA7IM,EA8WnBoE,sBAAwB,SAACC,GACrB,IAAMC,EAAY,EAAKC,oBAAoBF,GAExC,EAAKtB,MAAMhE,cACV,EAAKyF,SAAL,eACK,EAAKtB,aAAaC,QAAU,CACzBpD,MAAO,EAAK0E,iBACZH,eAIR,EAAKE,SAAL,eACK,EAAKtB,aAAaC,QAAU,CACzBpD,MAAM,YAAK,EAAKgD,MAAMhD,OACtBuE,gBA1XZ,EAAKpB,aAAewB,IAAMC,YAC1B,EAAKzB,aAAaC,QAAUN,EAAsB,EAAG,KACrD,EAAKvC,MAAL,eACK,EAAK4C,aAAaC,QAAU,CACzBpD,MAAO,GACPuE,UAAWM,SAPJ,E,iFAaf,IAAMN,EAAYO,KAAKN,oBAAoB3B,EAAeC,EAAsB,EAAED,EAAe3B,OAAO,KACxG4D,KAAKL,SAAL,eACKK,KAAK3B,aAAaC,QAAU,CACzBpD,MAAM,YAAK8E,KAAK9B,MAAMhD,OACtBuE,iB,yCAKOQ,EAAWC,GAC1B,GAAGD,EAAU/E,QAAU8E,KAAK9B,MAAMhD,MAAO,CAIrC,IAHA,IACMqD,EADOyB,KAAK3B,aAAaC,QACRE,uBAAuB,aAEtCrD,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IACjCoD,EAAUpD,GAAG4D,MAAMtE,gBAAkBuF,KAAK9B,MAAM1D,aAEpD,IAAMR,EAAY,YAAOgG,KAAK9B,MAAMhD,OAEpC8E,KAAKL,SAAL,eACKK,KAAK3B,aAAaC,QAAU,CACzBpD,MAAOlB,EACPyF,UAAWS,EAAUF,KAAK3B,aAAaC,SAASmB,aAK5D,GAAGQ,EAAU9F,mBAAqB6F,KAAK9B,MAAM/D,iBAAkB,CAC3D,IAAMsF,EAAYO,KAAKN,oBAAoB3B,EAAeC,EAAsB,EAAED,EAAe3B,OAAO,KAErG4D,KAAK9B,MAAMhE,cACV8F,KAAKL,SAAL,eACKK,KAAK3B,aAAaC,QAAU,CACzBpD,MAAO8E,KAAKJ,iBACZH,eAIRO,KAAKL,SAAL,eACKK,KAAK3B,aAAaC,QAAU,CACzBpD,MAAM,YAAK8E,KAAK9B,MAAMhD,OACtBuE,eAMhB,GAAGQ,EAAUhG,YAAc+F,KAAK9B,MAAMjE,WAAa+F,KAAK9B,MAAMjE,UAC1D,OAAO+F,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASmB,WACzC,KAAK1B,EAAe,GAChBiC,KAAK7B,gBACL,MACJ,KAAKJ,EAAe,GAChBiC,KAAKd,aACL,MACJ,KAAKnB,EAAe,GAChBiC,KAAKnD,YACL,MACJ,KAAKkB,EAAe,GAChBiC,KAAKzD,WACL,MACJ,KAAKwB,EAAe,GAChBiC,KAAK3C,YACL,MACJ,QACI8C,QAAQC,MAAM,yBAIvBH,EAAU7F,cAAgB4F,KAAK9B,MAAM9D,aACpC4F,KAAKN,oBAAoBM,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASmB,a,kCAuGnE,IALS,IAAD,OACFvD,EAAakC,EAA4B4B,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASpD,OAE/EqD,EADOyB,KAAK3B,aAAaC,QACRE,uBAAuB,aAHtC,WAKCrD,GAGL,GAFsBA,EAAI,IAAM,EAEb,CAAC,IAAD,cACgBe,EAAWf,GAD3B,GACRuD,EADQ,KACGE,EADH,KAETE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACnCO,EAAQnE,EAAI,IAAM,EAAI,EAAK+C,MAAM5D,eAAiB,EAAK4D,MAAM7D,aAEnE,GAA4B,IAAzB6B,EAAWf,GAAGiB,OACbqC,YAAW,WACPK,EAAYrE,gBAAkB6E,EAC9BN,EAAYvE,gBAAkB6E,IAzM3B,EA0MJnE,EAAyB,OAEzB,CAAC,IACGuD,EADJ,YACiBxC,EAAWf,GAD5B,MAEG2D,EAAcP,EAAUG,GAAWK,MAEzCN,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM3D,cAjNtC,EAkNJY,EAAyB,QAG7B,CAAC,IAAD,cAC4Be,EAAWf,GADvC,GACIuD,EADJ,KACe2B,EADf,KAEGvB,EAAcP,EAAUG,GAAWK,MAEzCN,YAAW,WACPK,EAAYG,OAAZ,UAAwBoB,EAAxB,MAE4B,IAAzBnE,EAAWf,GAAGiB,QACbqC,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM3D,cAC1C,KACJ,KAnOA,EAqORY,EAAyB,KAxC3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,K,iCAkDT,IALQ,IAAD,OACDe,EAAakC,EAA2B4B,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASpD,OAE9EqD,EADOyB,KAAK3B,aAAaC,QACRE,uBAAuB,aAHvC,WAKErD,GACL,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACIF,EAAWf,GADf,GACpBuD,EADoB,KACTE,EADS,KAErBE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eACzC0E,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM7D,aACzC2E,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAC1C,MA5PI,EA6PRc,EAAyB,UAEzB,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACyBF,EAAWf,GADpC,GAC3BuD,EAD2B,KAChBC,EADgB,KACFC,EADE,KACSC,EADT,KAE5BC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eACzC0E,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYrE,gBAAkB,EAAKyD,MAAM7D,aACzC2E,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAC1C,MA7QI,EA8QRc,EAAyB,SAEzB,CAAC,IAAD,cACwDe,EAAWf,GADnE,GACIuD,EADJ,KACeC,EADf,KAC6BC,EAD7B,KACwCC,EADxC,KAEGC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYrE,gBAAkB,EAAKyD,MAAM3D,YACzCyE,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPO,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAC1C,IAEAc,IAAMe,EAAWE,OAAS,GACzBqC,YAAW,WACPF,EAAU,GAAGQ,MAAMtE,gBAAkB,EAAKyD,MAAM3D,cACjD,MAlSA,EAoSRY,EAAyB,QArD3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,K,kCA+DT,IALS,IAAD,OACFe,EAAakC,EAA4B4B,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASpD,OAE/EqD,EADOyB,KAAK3B,aAAaC,QACRE,uBAAuB,aAHtC,WAKCrD,GACL,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACIF,EAAWf,GADf,GACpBuD,EADoB,KACTE,EADS,KAErBE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eACzC0E,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM7D,aACzC2E,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAC1C,MA3TI,EA4TRc,EAAyB,UAEzB,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACyBF,EAAWf,GADpC,GAC3BuD,EAD2B,KAChBC,EADgB,KACFC,EADE,KACSC,EADT,KAE5BC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WAWP,GAVAK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYrE,gBAAkB,EAAKyD,MAAM5D,eACzC0E,EAAYvE,gBAAkB,EAAKyD,MAAM5D,eAEzCmE,YAAW,WACPK,EAAYrE,gBAAkB,EAAKyD,MAAM7D,aACzC2E,EAAYvE,gBAAkB,EAAKyD,MAAM7D,eAC1C,IAEAc,IAAMe,EAAWE,OAAS,EACzB,IAD6B,IAAD,WACpBjB,GACJ,IAAMmF,EAAW/B,EAAUpD,GAAG4D,MAE9BN,YAAW,WACP6B,EAAS7F,gBAAkB,EAAKyD,MAAM5D,eAEtCmE,YAAW,WACP6B,EAAS7F,gBAAkB,EAAKyD,MAAM3D,cACnC,IAAJY,KACA,IAAJA,IATCA,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IAAM,EAAnCA,KA/UL,EA2VRA,EAAyB,OA7C3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,K,0CAkDOsE,GAIhB,IAHA,IACMc,EADOP,KAAK3B,aAAaC,QACVE,uBAAuB,gBAEpCrD,EAAI,EAAGA,EAAIoF,EAAQnE,OAAQjB,IAC5BsE,IAAcc,EAAQpF,GAAGqF,IACxBD,EAAQpF,GAAG4D,MAAMO,MAAQU,KAAK9B,MAAMpD,wBACpCyF,EAAQpF,GAAG4D,MAAMtE,gBAAkBuF,KAAK9B,MAAMrD,uBAE9C0F,EAAQpF,GAAG4D,MAAMO,MAAQU,KAAK9B,MAAMtD,gBACpC2F,EAAQpF,GAAG4D,MAAMtE,gBAAkBuF,KAAK9B,MAAMvD,cAItD,OAAO8E,I,uCA4BP,IAJA,IACMlB,EADOyB,KAAK3B,aAAaC,QACRE,uBAAuB,aACxCiC,EAAiB,GAEftF,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IACjCsF,EAAerF,KAAKsF,SAASnC,EAAUpD,GAAG4D,MAAME,SAGpD,OAAOwB,I,8CAIP,IAAME,EAAgBX,KAAK9B,MAAMhD,MAAM0F,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACpDC,EAAc3C,EAA4B4B,KAAK9B,MAAMhD,MAAM8F,SACjEb,QAAQc,IAAIN,GACZR,QAAQc,IAAIF,GACZZ,QAAQc,IAwDhB,SAAwBC,EAAUC,GAC9B,GAAID,EAAS9E,SAAW+E,EAAS/E,OAAQ,OAAO,EAChD,IAAK,IAAIjB,EAAI,EAAGA,EAAI+F,EAAS9E,OAAQjB,IACnC,GAAI+F,EAAS/F,KAAOgG,EAAShG,GAC3B,OAAO,EAGX,OAAO,EA/DSiG,CAAeT,EAAeI,M,+BAGpC,IAAD,OACL,OACI,yBACIM,UAAU,SACVtC,MAAO,CAAEtE,gBAAiBuF,KAAK9B,MAAMzD,iBACrC6G,YAAU,sBAEV,yBACID,UAAU,iBACVC,YAAU,UACVC,IAAKvB,KAAK3B,cAEV,yBACIgD,UAAU,kBACVC,YAAU,aAETtB,KAAKvE,MAAMuE,KAAK3B,aAAaC,SAASpD,MAAMsG,KAAI,SAACC,EAAMtG,GACpD,OACA,yBACIkG,UAAU,YACVK,IAAKvG,EACL4D,MAAO,CACHtE,gBAAiB,EAAKyD,MAAM1D,aAC5ByE,OAAO,GAAD,OAAKwC,EAAL,YAIlB,yBACIJ,UAAU,aACVC,YAAU,SACVvC,MAAO,CAAEE,OAAO,YAGxB,yBACIoC,UAAU,WACVC,YAAU,iBAEV,4BAAQD,UAAU,eAAeb,GAAG,gBAAgBmB,QAAS,kBAAM,EAAKpC,sBAAsBxB,EAAe,MAA7G,iBACA,4BAAQsD,UAAU,eAAeb,GAAG,aAAamB,QAAS,kBAAM,EAAKpC,sBAAsBxB,EAAe,MAA1G,cACA,4BAAQsD,UAAU,eAAeb,GAAG,YAAYmB,QAAS,kBAAM,EAAKpC,sBAAsBxB,EAAe,MAAzG,aACA,4BAAQsD,UAAU,eAAeb,GAAG,WAAWmB,QAAS,kBAAM,EAAKpC,sBAAsBxB,EAAe,MAAxG,YACA,4BAAQsD,UAAU,eAAeb,GAAG,YAAYmB,QAAS,kBAAM,EAAKpC,sBAAsBxB,EAAe,MAAzG,oB,GAhcQ6D,aCcjBC,eAnBS,SAACpG,GACvB,MAAO,CACLP,MAAOO,EAAM1B,cACbE,UAAWwB,EAAMxB,UACjBE,iBAAkBsB,EAAMtB,iBACxBD,cAAeuB,EAAMvB,cACrBE,YAAaqB,EAAMrB,YACnBC,aAAcoB,EAAMpB,aACpBC,eAAgBmB,EAAMnB,eACtBC,YAAakB,EAAMlB,YACnBC,aAAciB,EAAMjB,aACpBC,gBAAiBgB,EAAMhB,gBACvBE,aAAcc,EAAMd,aACpBC,gBAAiBa,EAAMb,gBACvBC,qBAAsBY,EAAMZ,qBAC5BC,wBAAyBW,EAAMX,2BAIpB+G,CAAyB5D,G,MCQzB6D,MA1Bf,SAAgB5D,GACZ,OACI,yBACImD,UAAU,UACVC,YAAU,iBAEV,wBACIA,YAAU,QACVvC,MAAO,CAAEO,MAAOpB,EAAMnD,aAF1B,sBAIA,4BAAQ4G,QAAS,kBAAMzD,EAAMjE,cAA7B,SACA,4BAAQ0H,QAAS,kBAAMzD,EAAM6D,kBAA7B,wBACA,4BAAQJ,QAAS,kBAAMzD,EAAMlE,iBAA7B,WACA,4BAAQ2H,QAAS,kBAAMzD,EAAM8D,gBAA7B,WCiBGH,eANS,SAACpG,GACvB,MAAO,CACLV,WAAYU,EAAMV,eA3BK,SAACkH,GAC1B,MAAO,CACLjI,aAAc,WACZiI,EAAS,CACPtG,KAAM,sCAGVoG,cAAe,WACbE,EAAS,CACPtG,KAAM,uCAGV1B,UAAW,WACTgI,EAAS,CACPtG,KAAM,mCAGVqG,YAAa,WACXC,EAAS,CACPtG,KAAM,wCAYCkG,CAA6CC,G,MCH7CI,MAzBf,SAAahE,GACX,OACE,yBACEmD,UAAU,MACVC,YAAU,gBACVvC,MAAO,CAAEtE,gBAAiByD,EAAMxD,qBAEhC,kBAACyH,EAAD,MACA,yBACEd,UAAU,OACVC,YAAU,YAEV,kBAACc,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,SCZOP,eANS,SAACpG,GACvB,MAAO,CACLf,mBAAoBe,EAAMf,sBAIfmH,CAAyBK,GCGpBG,QACW,cAA7BtG,OAAOuG,SAASC,UAEe,UAA7BxG,OAAOuG,SAASC,UAEhBxG,OAAOuG,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAACC,EAAD,OAENC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLD,QAAQC,MAAMA,EAAMkD,c","file":"static/js/main.8f919f5f.chunk.js","sourcesContent":["const NUMBER_OF_ARRAY_BARS = 120;\n\nconst initialState = {\n  unsortedArray: shuffleArray(),\n  startSort: false,\n  isArraySorted: false,\n  randomAlgoClicks: 0,\n  isDarkTheme: false,\n  primaryColor: 'darkkhaki',\n  secondaryColor: 'tomato',\n  sortedColor: '#6ad4f7',\n  defaultColor: '#b0b0b0',\n  backgroundColor: 'rgb(241, 241, 241)',\n  appBackgroundColor: 'white',\n  algoButtonBg: '#ffffff',\n  algoButtonColor: '#494949',\n  algoButtonSelectedBg: 'rgb(65, 146, 247)',\n  algoButtonSelectedColor: '#ffffff',\n  titleColor: 'rgb(101, 196, 226)'\n};\n\nconst sortingVisualizerReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'SORTING_VISUALIZER_SHUFFLE_ARRAY': \n        return Object.assign({}, state, {\n          unsortedArray: shuffleArray(),\n          startSort: false,\n          isArraySorted: false\n        });\n      case 'SORTING_VISUALIZER_RANDOMIZE_ALGO': \n        return Object.assign({}, state, {\n          randomAlgoClicks: state.randomAlgoClicks+1,\n          startSort: false\n      });\n      case 'SORTING_VISUALIZER_START_SORT':\n        return Object.assign({}, state, {\n          startSort: true,\n          isArraySorted: true\n        })   \n      case 'SORTING_VISUALIZER_CHANGE_THEME':\n        return Object.assign({}, state, {\n          isDarkTheme: !state.isDarkTheme,\n          primaryColor: !state.isDarkTheme ? '#ab9d78' : 'darkkhaki',\n          secondaryColor: !state.isDarkTheme ? '#822c2c' : 'tomato',\n          sortedColor: !state.isDarkTheme ? '#2f787d' : '#6ad4f7', \n          defaultColor: !state.isDarkTheme ? '#71868f' : '#b0b0b0',\n          backgroundColor: !state.isDarkTheme ? 'rgb(45, 45, 45)' : 'rgb(241, 241, 241)',\n          appBackgroundColor: !state.isDarkTheme ? '#3a3a3a' : 'white',\n          algoButtonBg: !state.isDarkTheme ? '#8a8a8a' : '#ffffff',\n          algoButtonColor: !state.isDarkTheme ? '#212121' : '#494949',\n          algoButtonSelectedBg: !state.isDarkTheme ? 'rgb(5, 105, 154)' : 'rgb(65, 146, 247)',\n          algoButtonSelectedColor: !state.isDarkTheme ? 'rgb(206, 206, 206)' : '#ffffff',\n          titleColor: !state.isDarkTheme ? 'rgb(83, 147, 167)' : 'rgb(101, 196, 226)',\n        })    \n      default: \n        return state;\n    }\n  }\n\nfunction shuffleArray() {\n  const array = [];\n\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    array.push(randomIntFromInterval(10, 330));\n  }\n\n  return array;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n  \nexport default sortingVisualizerReducer;","import { createStore } from 'redux';\nimport sortingVisualizerReducer from './sortingVisualizerReducer';\n\nexport default createStore(\n    sortingVisualizerReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export function getSelectionSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        let min = i;\n\n        for(let j = i+1; j < array.length; j++) {\n            animations.push([j,min]);\n\n            if(array[j] < array[min]) {\n                min = j;\n            }\n        }\n        swap(array, i, min);\n        animations.push([i, array[i], min, array[min]]);\n    }\n\n    return animations;\n};\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        const sortedNumbers = array.length - 1 - i; \n\n        for(let j = 0; j < sortedNumbers; j++) {\n            animations.push([j,j+1]);\n\n            if(array[j+1] < array[j]) {\n                swap(array, j, j+1);\n            } \n            animations.push([j+1, array[j+1], j, array[j]]);\n            animations.push([j,j+1]);\n        }\n    }\n    return animations;\n};\n\nexport function getHeapSortAnimations(array) {\n    const animations = []\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(arr, animations) {\n    let i = Math.floor(arr.length / 2 - 1);\n    let k = arr.length - 1;\n    \n    while (i >= 0) {\n        heapify(arr, arr.length, i, animations);\n        i--;\n    }\n\n    while(k >= 0) {\n        [arr[0], arr[k]] = [arr[k], arr[0]];\n        animations.push([k, arr[k], 0, arr[0], 0]);\n        heapify(arr, k, 0, animations);\n        k--;\n    }\n\n    return arr;\n}\n\nfunction heapify(arr, length, i, animations) {\n    let largest = i;\n    let left = i * 2 + 1;\n    let right = left + 1;\n\n    if(left < length && arr[left] > arr[largest]) {\n        largest = left;\n        animations.push([largest, left]);\n    }\n\n    if(right < length && arr[right] > arr[largest]) {\n        largest = right;\n        animations.push([largest, right]);\n    }\n\n    if(largest !== i) {\n        animations.push([largest, arr[i], i, arr[largest]]);\n\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, length, largest, animations);\n    }\n\n    return arr;\n}\n\nexport function getMergeSortAnimations(array) {\n    if (array.length <= 1) return array;\n\n    const animations = [];\n    const auxiliaryArray = [...array];\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    if((mainArray.length - 1) === endIdx && 0 === startIdx) {\n        while (i <= middleIdx && j <= endIdx) {            \n            animations.push([i, j, 0]);\n            animations.push([i, j, 0]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i], 0]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j], 0]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i, 0]);\n            animations.push([i, i, 0]);\n            animations.push([k, auxiliaryArray[i], 0]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j, 0]);\n            animations.push([j, j, 0]);\n            animations.push([k, auxiliaryArray[j], 0]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    } else {\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push([i, j]);\n            animations.push([i, j]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i]]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j]]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i]);\n            animations.push([i, i]);\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j]);\n            animations.push([j, j]);\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }    \n    \n}\n\nexport function getQuickSortAnimations(array) {\n    const animations = []\n    quickSort(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quickSort(items, left, right, animations) {\n    let index;\n\n    if (items.length > 1) {\n        index = partition(items, left, right, animations);\n        \n        if (left < index - 1) {\n            quickSort(items, left, index - 1, animations);\n        }\n\n        if (index < right) {\n            quickSort(items, index, right, animations);\n        }\n    }\n\n    return items;\n}\n\nfunction partition(items, left, right, animations) {\n    const pivotIndex = Math.floor((right + left) / 2);\n    const pivot = items[pivotIndex];\n    let i = left; \n    let j = right;\n\n    while (i <= j) {\n        while (items[i] < pivot) {\n            animations.push([i, pivotIndex]);\n            i++;\n        }\n\n        while (items[j] > pivot) {\n            animations.push([j, pivotIndex]);\n            j--;\n        }\n\n        if (i <= j) {\n            swap(items, i, j);\n            animations.push([i, items[i], j, items[j]]);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nfunction swap(items, leftIndex, rightIndex){\n    const temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n  ","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Algo from '../sortingAlgorithms/sortingAlgorithms';\nimport './SortingVisualizer.css';\n\nconst algorithmArray = ['selectionSort', 'bubbleSort', 'mergeSort', 'heapSort', 'quickSort'];\nconst ANIMATION_SPEED_MS = 2;\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.componentRef = React.createRef();\n        this.componentRef.current = randomIntFromInterval(0, 1000000);\n        this.state = {\n            [this.componentRef.current]: {\n                array: [],\n                algorithm: String\n            }\n        };\n    }\n    \n    componentDidMount() {\n        const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n        this.setState({            \n            [this.componentRef.current]: {\n                array: [...this.props.array],\n                algorithm\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.array !== this.props.array) {\n            const node = this.componentRef.current;\n            const arrayBars = node.getElementsByClassName('array-bar');\n\n            for(let i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = this.props.defaultColor;\n            }\n            const shuffleArray = [...this.props.array];\n\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: shuffleArray,\n                    algorithm: prevState[this.componentRef.current].algorithm\n                }\n            });   \n        }\n\n        if(prevProps.randomAlgoClicks !== this.props.randomAlgoClicks) {\n            const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n\n            if(this.props.isArraySorted) {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: this.getSortedArray(),\n                        algorithm\n                    }\n                }); \n            } else {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: [...this.props.array],\n                        algorithm\n                    }\n                }); \n            }            \n        }\n\n        if(prevProps.startSort !== this.props.startSort && this.props.startSort) {\n            switch(this.state[this.componentRef.current].algorithm) {\n                case algorithmArray[0]:\n                    this.selectionSort();\n                    break;\n                case algorithmArray[1]:\n                    this.bubbleSort();\n                    break;\n                case algorithmArray[2]:\n                    this.mergeSort();\n                    break;\n                case algorithmArray[3]:\n                    this.heapSort();\n                    break;\n                case algorithmArray[4]:\n                    this.quickSort();\n                    break;\n                default:\n                    console.error('no algorithm selected')\n            }\n        }\n\n        if(prevProps.isDarkTheme !== this.props.isDarkTheme) {\n            this.highlightAlgoButton(this.state[this.componentRef.current].algorithm);\n        }\n    }\n\n    selectionSort = () => {\n        const animations = Algo.getSelectionSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        \n        for(let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 4) {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    setTimeout(() => {                            \n                        if (barOneIdx < barTwoIdx) {\n                            barOneStyle.backgroundColor = this.props.sortedColor;\n                        } else {\n                            barTwoStyle.backgroundColor = this.props.sortedColor;\n                        }\n                    }, ANIMATION_SPEED_MS); \n\n                    if(i === animations.length -1) {\n                        setTimeout(() => {\n                            const barStyle = arrayBars[this.props.array.length-1].style;\n                            barStyle.backgroundColor = this.props.sortedColor;\n                        }, ANIMATION_SPEED_MS);  \n                    }     \n                }, i * ANIMATION_SPEED_MS);\n\n            } else {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;                    \n                    }, ANIMATION_SPEED_MS);\n                }, i * ANIMATION_SPEED_MS);                \n            }\n        }\n    }\n\n    bubbleSort = () => {\n        const animations = Algo.getBubbleSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let isColorChange, n = 119, barsIndex = 119; \n\n        for (let i = 0; i < animations.length; i++) {\n            isColorChange = i % 3 !== 1;\n\n            if (isColorChange) { \n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 !== 2 ? this.props.secondaryColor : this.props.primaryColor; \n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS / 3);\n\n            } else {                \n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    if(barTwoIdx === n || barOneIdx === n) {\n                        setTimeout(() => {                            \n                            const barStyle = arrayBars[barsIndex--].style;\n                            barStyle.backgroundColor = this.props.sortedColor;\n                        }, ANIMATION_SPEED_MS);     \n\n                        if(--n === 0) {\n                            setTimeout(() => {\n                                const barStyle = arrayBars[0].style;\n                                barStyle.backgroundColor = this.props.sortedColor;\n                            }, ANIMATION_SPEED_MS);   \n                        }\n                    }                \n                }, i * ANIMATION_SPEED_MS/3);                \n            }\n        }\n    }\n\n    mergeSort() {\n        const animations = Algo.getMergeSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = i % 3 !== 2; \n\n            if (isColorChange) { \n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? this.props.secondaryColor : this.props.primaryColor;              \n\n                if(animations[i].length !== 3) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * ANIMATION_SPEED_MS * 3);\n\n                } else {\n                    const [barOneIdx] = animations[i]; \n                    const barOneStyle = arrayBars[barOneIdx].style;\n\n                    setTimeout(() => {                    \n                        barOneStyle.backgroundColor = this.props.sortedColor;\n                    }, i * ANIMATION_SPEED_MS * 3);    \n                }\n\n            } else {\n                const [barOneIdx, newHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                \n                setTimeout(() => {                    \n                    barOneStyle.height = `${newHeight}px`;\n\n                    if(animations[i].length === 3) {\n                        setTimeout(() => {                    \n                            barOneStyle.backgroundColor = this.props.secondaryColor;\n\n                            setTimeout(() => {                    \n                                barOneStyle.backgroundColor = this.props.sortedColor;\n                            }, 1); \n                        }, 0);    \n                    }\n                }, i * ANIMATION_SPEED_MS * 3);              \n            }\n        }\n    }\n\n    heapSort() {\n        const animations = Algo.getHeapSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 2) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10);\n                }, i * ANIMATION_SPEED_MS * 4.7);\n                \n            } else if(animations[i].length === 4) {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.backgroundColor = this.props.secondaryColor;                  \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {   \n                        barOneStyle.height = `${barOneHeight}px`;\n                        barTwoStyle.height = `${barTwoHeight}px`;                      \n                        barOneStyle.backgroundColor = this.props.primaryColor;                  \n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10)\n                }, i * ANIMATION_SPEED_MS * 4.7); \n\n            } else {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barOneStyle.backgroundColor = this.props.sortedColor;     \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;  \n\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = this.props.primaryColor;  \n                    }, 10) \n\n                    if(i === animations.length - 1) {\n                        setTimeout(() => {\n                            arrayBars[0].style.backgroundColor = this.props.sortedColor;   \n                        }, 10) \n                    }   \n                }, i * ANIMATION_SPEED_MS * 4.75); \n            }            \n        }\n    }\n\n    quickSort() {\n        const animations = Algo.getQuickSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 2) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10);\n                }, i * ANIMATION_SPEED_MS * 8.2);\n\n            } else if(animations[i].length === 4) {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barOneStyle.backgroundColor = this.props.secondaryColor;     \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;  \n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;     \n                        barTwoStyle.backgroundColor = this.props.primaryColor;  \n                    }, 10) \n\n                    if(i === animations.length - 1) {\n                        for(let i = 0; i < arrayBars.length; i++) {\n                            const barStyle = arrayBars[i].style;\n            \n                            setTimeout(() => {\n                                barStyle.backgroundColor = this.props.secondaryColor;    \n\n                                setTimeout(() => {\n                                    barStyle.backgroundColor = this.props.sortedColor;     \n                                }, i * 0.05)  \n                            }, i * 8.5) \n                        }\n                    }   \n                }, i * ANIMATION_SPEED_MS * 8.2); \n            }          \n        }\n    }\n\n    highlightAlgoButton(algorithm) {\n        const node = this.componentRef.current;\n        const buttons = node.getElementsByClassName('algo-buttons');\n\n        for(let i = 0; i < buttons.length; i++) {\n            if(algorithm === buttons[i].id){\n                buttons[i].style.color = this.props.algoButtonSelectedColor;\n                buttons[i].style.backgroundColor = this.props.algoButtonSelectedBg;\n            } else {\n                buttons[i].style.color = this.props.algoButtonColor;\n                buttons[i].style.backgroundColor = this.props.algoButtonBg;\n            }\n        }        \n\n        return algorithm;\n    }\n\n    handleClickAlgoButton = (algo) => {\n        const algorithm = this.highlightAlgoButton(algo);\n\n        if(this.props.isArraySorted) {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: this.getSortedArray(),\n                    algorithm\n                }\n            });            \n        } else {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: [...this.props.array],\n                    algorithm\n                }\n            });\n        }\n    }\n\n    getSortedArray() {\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        const completedArray = [];\n\n        for(let i = 0; i < arrayBars.length; i++) {\n            completedArray.push(parseInt(arrayBars[i].style.height));\n        }\n\n        return completedArray;\n    }\n\n    testSortingAlgorithms() {\n        const jsSortedArray = this.props.array.sort((a, b) => a - b);\n        const quickSorted = Algo.getQuickSortAnimations(this.props.array.slice());\n        console.log(jsSortedArray)\n        console.log(quickSorted)\n        console.log(arraysAreEqual(jsSortedArray, quickSorted));\n      }\n\n    render() {\n        return (\n            <div \n                className=\"canvas\"\n                style={{ backgroundColor: this.props.backgroundColor }}\n                data-test=\"sorting-visualizer\"\n            >\n                <div \n                    className=\"canvas-content\" \n                    data-test=\"content\"\n                    ref={this.componentRef}\n                >\n                    <div \n                        className=\"array-container\"\n                        data-test=\"container\"\n                    >\n                        {this.state[this.componentRef.current].array.map((value,i) => {\n                            return (\n                            <div\n                                className=\"array-bar\"\n                                key={i}\n                                style={{ \n                                    backgroundColor: this.props.defaultColor,\n                                    height: `${value}px`\n                                }}\n                            ></div>);\n                        })}\n                        <div \n                            className=\"static-bar\" \n                            data-test=\"static\"\n                            style={{ height: `330px` }}\n                        ></div>\n                    </div>\n                    <div \n                        className=\"algo-bar\"\n                        data-test=\"algorithm-bar\"\n                    >\n                        <button className=\"algo-buttons\" id=\"selectionSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[0])}>SelectionSort</button>\n                        <button className=\"algo-buttons\" id=\"bubbleSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[1])}>BubbleSort</button>\n                        <button className=\"algo-buttons\" id=\"mergeSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[2])}>MergeSort</button>\n                        <button className=\"algo-buttons\" id=\"heapSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[3])}>HeapSort</button>\n                        <button className=\"algo-buttons\" id=\"quickSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[4])}>QuickSort</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nSortingVisualizer.propTypes = {\n    array: PropTypes.array,\n    startSort: PropTypes.bool,\n    randomAlgoClicks: PropTypes.number,\n    isArraySorted: PropTypes.bool,\n    isDarkTheme: PropTypes.bool,\n    primaryColor: PropTypes.string,\n    secondaryColor: PropTypes.string,\n    sortedColor: PropTypes.string,\n    defaultColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    algoButtonBg: PropTypes.string,\n    algoButtonColor: PropTypes.string,\n    algoButtonSelectedBg: PropTypes.string,\n    algoButtonSelectedColor: PropTypes.string\n};\n\nexport default SortingVisualizer;","import { connect } from 'react-redux';\nimport SortingVisualizer from '../SortingVisualizerX/SortingVisualizer';\n\nconst mapStateToProps = (state) => {\n  return { \n    array: state.unsortedArray, \n    startSort: state.startSort,\n    randomAlgoClicks: state.randomAlgoClicks,\n    isArraySorted: state.isArraySorted,\n    isDarkTheme: state.isDarkTheme,\n    primaryColor: state.primaryColor,\n    secondaryColor: state.secondaryColor,\n    sortedColor: state.sortedColor,\n    defaultColor: state.defaultColor,\n    backgroundColor: state.backgroundColor,\n    algoButtonBg: state.algoButtonBg,\n    algoButtonColor: state.algoButtonColor,\n    algoButtonSelectedBg: state.algoButtonSelectedBg,\n    algoButtonSelectedColor: state.algoButtonSelectedColor\n  }\n};\n\nexport default connect(mapStateToProps)(SortingVisualizer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nfunction Navbar(props) {\n    return (\n        <div \n            className=\"nav-bar\"\n            data-test=\"nav-component\"\n        >\n            <h2\n                data-test=\"title\"\n                style={{ color: props.titleColor }}\n            >Sorting Visualizer</h2>\n            <button onClick={() => props.startSort()}>Start</button>\n            <button onClick={() => props.randomizeAlgo()}>Randomize Algorithms</button>\n            <button onClick={() => props.shuffleArray()}>Shuffle</button>\n            <button onClick={() => props.changeTheme()}>Theme</button>\n        </div>\n    );    \n}\n\nNavbar.propTypes = {\n    startSort: PropTypes.func,\n    randomizeAlgo: PropTypes.func,\n    shuffleArray: PropTypes.func,\n    changeTheme: PropTypes.func,\n    titleColor: PropTypes.string\n};\n\nexport default Navbar;","import { connect } from 'react-redux';\nimport Navbar from '../SortingVisualizerX/Navbar';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    shuffleArray: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_SHUFFLE_ARRAY'\n      });\n    },\n    randomizeAlgo: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_RANDOMIZE_ALGO'\n      });\n    },\n    startSort: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_START_SORT'\n      });\n    },\n    changeTheme: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_CHANGE_THEME'\n      });\n    }\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    titleColor: state.titleColor\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import React from 'react';\nimport SortingVisualizerContainer from './containers/SortingVisualizerContainer';\nimport NavbarContainer from './containers/NavbarContainer';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <div \n      className=\"App\"\n      data-test=\"app-component\"\n      style={{ backgroundColor: props.appBackgroundColor }}\n    >\n      <NavbarContainer />\n      <div \n        className=\"grid\"\n        data-test=\"grid-div\"\n      >\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n      </div>      \n    </div>\n  );\n}\n\nApp.propTypes = {\n  appBackgroundColor: PropTypes.string\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../App';\n\nconst mapStateToProps = (state) => {\n  return { \n    appBackgroundColor: state.appBackgroundColor\n  }\n};\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}