{"version":3,"sources":["redux/sortingVisualizerReducer.js","redux/store.js","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizerX/SortingVisualizer.jsx","containers/SortingVisualizerContainer.js","SortingVisualizerX/Navbar.jsx","containers/NavbarContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","unsortedArray","shuffleArray","startSort","isArraySorted","randomAlgoClicks","min","max","array","i","push","Math","floor","random","sortingVisualizerReducer","state","action","type","Object","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getSelectionSortAnimations","animations","length","j","temp","getBubbleSortAnimations","sortedNumbers","getMergeSortAnimations","auxiliaryArray","mergeSort","mainArray","startIdx","endIdx","middleIdx","k","merge","algorithmArray","randomIntFromInterval","SortingVisualizer","props","selectionSort","Algo","componentRef","current","arrayBars","getElementsByClassName","barsIndex","n","setTimeout","barOneIdx","barOneHeight","barTwoIdx","barTwoHeight","barOneStyle","style","barTwoStyle","height","backgroundColor","bubbleSort","color","handleClickAlgoButton","algo","algorithm","highlightAlgoButton","setState","getSortedArray","React","createRef","String","this","prevProps","prevState","console","error","newHeight","buttons","id","completedArray","parseInt","jsSortedArray","sort","a","b","bubbleSorted","slice","selectionSorted","mergeSorted","log","className","ref","map","value","key","onClick","Component","connect","Navbar","randomizeAlgo","dispatch","App","NavbarContainer","SortingVisualizerContainer","Boolean","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c509fb80.chunk.js","sourcesContent":["const NUMBER_OF_ARRAY_BARS = 120;\n\nconst initialState = {\n  unsortedArray: shuffleArray(),\n  startSort: false,\n  isArraySorted: false,\n  randomAlgoClicks: 0\n};\n\nconst sortingVisualizerReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'SORTING_VISUALIZER_SHUFFLE_ARRAY': \n        return Object.assign({}, state, {\n          unsortedArray: shuffleArray(),\n          startSort: false,\n          isArraySorted: false\n        });\n      case 'SORTING_VISUALIZER_RANDOMIZE_ALGO': \n        return Object.assign({}, state, {\n          randomAlgoClicks: state.randomAlgoClicks+1,\n          startSort: false\n      });\n      case 'SORTING_VISUALIZER_START_SORT':\n        return Object.assign({}, state, {\n          startSort: true,\n          isArraySorted: true\n        })      \n      default: \n        return state;\n    }\n  }\n\nfunction shuffleArray() {\n  const array = [];\n\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    array.push(randomIntFromInterval(10, 330));\n  }\n\n  return array;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n  \nexport default sortingVisualizerReducer;","import { createStore } from 'redux';\nimport sortingVisualizerReducer from './sortingVisualizerReducer';\n\nexport default createStore(\n    sortingVisualizerReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export function getSelectionSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        let min = i;\n        for(let j = i+1; j < array.length; j++) {\n            animations.push([j,min]);\n            if(array[j] < array[min]) {\n                min = j;\n            }\n        }\n        const temp = array[i];\n        array[i] = array[min];\n        array[min] = temp;\n        animations.push([i, array[i], min, array[min]]);\n    }\n\n    return animations;\n};\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        const sortedNumbers = array.length - 1 - i;\n\n        for(let j = 0; j < sortedNumbers; j++) {\n            animations.push([j,j+1]);\n\n            if(array[j+1] < array[j]) {\n                const temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n                animations.push([j+1, array[j+1], j, array[j]]);\n\n            } else {\n                animations.push([j, array[j], j+1, array[j+1]]);\n            }\n            animations.push([j,j+1]);\n        }\n    }\n    \n    return animations;\n};\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = [...array];\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nfunction merge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    if((mainArray.length - 1) === endIdx && 0 === startIdx) {\n        while (i <= middleIdx && j <= endIdx) {            \n            animations.push([i, j, 0]);\n            animations.push([i, j, 0]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i], 0]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j], 0]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i, 0]);\n            animations.push([i, i, 0]);\n            animations.push([k, auxiliaryArray[i], 0]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j, 0]);\n            animations.push([j, j, 0]);\n            animations.push([k, auxiliaryArray[j], 0]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    } else {\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push([i, j]);\n            animations.push([i, j]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i]]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j]]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i]);\n            animations.push([i, i]);\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j]);\n            animations.push([j, j]);\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    \n    \n}\n  ","import React, { Component } from 'react';\nimport * as Algo from '../sortingAlgorithms/sortingAlgorithms';\nimport './SortingVisualizer.css';\n\nconst algorithmArray = ['selectionSort', 'bubbleSort', 'mergeSort'];\nconst NUMBER_OF_ARRAY_BARS = 120; // for testing\nconst ANIMATION_SPEED_MS = 2;\nconst PRIMARY_COLOR = 'darkkhaki';\nconst SECONDARY_COLOR = 'tomato';\nconst SORTED_COLOR = 'deepskyblue';\nconst DEFAULT_COLOR = 'grey';\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.componentRef = React.createRef();\n        this.componentRef.current = randomIntFromInterval(0, 1000000);\n        this.state = {\n            [this.componentRef.current]: {\n                array: [],\n                algorithm: String\n            }\n        };\n    }\n    \n    componentDidMount() {\n        const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n        // the array from this.props is copied into this component's state.\n        this.setState({            \n            [this.componentRef.current]: {\n                array: [...this.props.array],\n                algorithm\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.array !== this.props.array) {\n            // this.testSortingAlgorithms();\n            const node = this.componentRef.current;\n            const arrayBars = node.getElementsByClassName('array-bar');\n\n            for(let i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\n            }\n            const shuffleArray = [...this.props.array];\n\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: shuffleArray,\n                    algorithm: prevState[this.componentRef.current].algorithm\n                }\n            });   \n        }\n\n        if(prevProps.randomAlgoClicks !== this.props.randomAlgoClicks) {\n            const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n\n            if(this.props.isArraySorted) {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: this.getSortedArray(),\n                        algorithm\n                    }\n                }); \n            } else {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: [...this.props.array],\n                        algorithm\n                    }\n                }); \n            }            \n        }\n\n        if(prevProps.startSort !== this.props.startSort && this.props.startSort) {\n            switch(this.state[this.componentRef.current].algorithm) {\n                case algorithmArray[0]:\n                    this.selectionSort();\n                    break;\n                case algorithmArray[1]:\n                    this.bubbleSort();\n                    break;\n                case algorithmArray[2]:\n                    this.mergeSort();\n                    break;\n                default:\n                    console.error('no algorithm selected')\n            }\n        }\n    }\n\n    selectionSort = () => {\n        const animations = Algo.getSelectionSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let barsIndex = 0, n = 0;\n\n        for(let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 4) {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    setTimeout(() => {                            \n                        const barStyle = arrayBars[barsIndex++].style;\n                        barStyle.backgroundColor = SORTED_COLOR;\n                    }, ANIMATION_SPEED_MS); \n\n                    if(++n === 119) {\n                        setTimeout(() => {\n                            const barStyle = arrayBars[n].style;\n                            barStyle.backgroundColor = SORTED_COLOR;\n                        }, ANIMATION_SPEED_MS);  \n                    }     \n                }, i * ANIMATION_SPEED_MS);\n\n            } else {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = PRIMARY_COLOR;\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;                    \n                    }, ANIMATION_SPEED_MS);\n                }, i * ANIMATION_SPEED_MS);                \n            }\n        }\n    }\n\n    bubbleSort = () => {\n        const animations = Algo.getBubbleSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let isColorChange, n = 119, barsIndex = 119; // 249\n\n        for (let i = 0; i < animations.length; i++) {\n            isColorChange = i % 3 !== 1;\n\n            if (isColorChange) { // every 1st and 3rd. Eg. 0, 2, 3, 5, 6, 8\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 !== 2 ? SECONDARY_COLOR : PRIMARY_COLOR; // 1st true, 2nd and 3rd false (3rd don't execute)\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS/3);\n\n            } else { // every 2nd                 \n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    if(barTwoIdx === n || barOneIdx === n) {\n                        setTimeout(() => {                            \n                            const barStyle = arrayBars[barsIndex--].style;\n                            barStyle.backgroundColor = SORTED_COLOR;\n                        }, ANIMATION_SPEED_MS);     \n\n                        if(--n === 0) {\n                            setTimeout(() => {\n                                const barStyle = arrayBars[0].style;\n                                barStyle.backgroundColor = SORTED_COLOR;\n                            }, ANIMATION_SPEED_MS);   \n                        }\n                    }                \n                }, i * ANIMATION_SPEED_MS/3);                \n            }\n        }\n    }\n\n    mergeSort() {\n        const animations = Algo.getMergeSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = i % 3 !== 2; // 1st and 2nd true, 3rd false\n\n            if (isColorChange) { // 1st and 2nd [i] processed\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR; // 1st true, 2nd and 3rd false (3rd don't execute)                \n\n                if(animations[i].length !== 3) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * ANIMATION_SPEED_MS * 3);\n\n                } else {\n                    const [barOneIdx] = animations[i]; \n                    const barOneStyle = arrayBars[barOneIdx].style;\n\n                    setTimeout(() => {                    \n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }, i * ANIMATION_SPEED_MS * 3);    \n                }\n\n            } else { // every 3rd i \n                const [barOneIdx, newHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                \n                setTimeout(() => {                    \n                    barOneStyle.height = `${newHeight}px`;\n\n                    if(animations[i].length === 3) {\n                        setTimeout(() => {                    \n                            barOneStyle.backgroundColor = SORTED_COLOR;\n                        }, 0);    \n                    }\n                }, i * ANIMATION_SPEED_MS * 3);              \n            }\n        }\n      }\n\n    highlightAlgoButton(algorithm) {\n        const node = this.componentRef.current;\n        const buttons = node.getElementsByClassName('algo-buttons');\n\n        for(let i = 0; i < buttons.length; i++) {\n            if(algorithm === buttons[i].id){\n                buttons[i].style.color = '#ffffff';\n                buttons[i].style.backgroundColor = '#f6b93b';\n            } else {\n                buttons[i].style.color = '#494949';\n                buttons[i].style.backgroundColor = '#ffffff';\n            }\n        }        \n\n        return algorithm;\n    }\n\n    handleClickAlgoButton = (algo) => {\n        const algorithm = this.highlightAlgoButton(algo);\n\n        if(this.props.isArraySorted) {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: this.getSortedArray(),\n                    algorithm\n                }\n            });            \n        } else {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: [...this.props.array],\n                    algorithm\n                }\n            });\n        }\n    }\n\n    getSortedArray() {\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        const completedArray = [];\n\n        for(let i = 0; i < arrayBars.length; i++) {\n            completedArray.push(parseInt(arrayBars[i].style.height));\n        }\n\n        return completedArray;\n    }\n\n    testSortingAlgorithms() {\n        const jsSortedArray = this.props.array.sort((a, b) => a - b);\n        const bubbleSorted = Algo.getBubbleSortAnimations(this.props.array.slice());\n        const selectionSorted = Algo.getSelectionSortAnimations(this.props.array.slice());\n        const mergeSorted = Algo.getMergeSortAnimations(this.props.array.slice());\n\n        console.log(jsSortedArray.length)\n        console.log(bubbleSorted.length)\n        console.log(selectionSorted.length)\n        console.log(mergeSorted.length)\n\n        // console.log(arraysAreEqual(jsSortedArray, sortedArray));\n      }\n\n    render() {\n        return (\n            <div className=\"canvas\">\n                <div className=\"canvas-content\" ref={this.componentRef}>\n                    <div className=\"array-container\">\n                        {this.state[this.componentRef.current].array.map((value,i) => {\n                            return (\n                            <div\n                                className=\"array-bar\"\n                                key={i}\n                                style={{ \n                                    backgroundColor: DEFAULT_COLOR,\n                                    height: `${value}px`\n                                }}\n                            ></div>);\n                        })}\n                        <div className=\"static-bar\" style={{ height: `330px` }}></div>\n                    </div>\n                    <div className=\"algo-bar\">\n                        <button className=\"algo-buttons\" id=\"selectionSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[0])}>SelectionSort</button>\n                        <button className=\"algo-buttons\" id=\"bubbleSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[1])}>BubbleSort</button>\n                        <button className=\"algo-buttons\" id=\"mergeSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[2])}>MergeSort</button>\n                        <button className=\"algo-buttons\" >HeapSort</button>\n                        <button className=\"algo-buttons\" >QuickSort</button>\n                        <button className=\"algo-buttons\" >... Sort</button>\n                        <button className=\"algo-buttons\" >... Sort</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nexport default SortingVisualizer;","import { connect } from 'react-redux';\nimport SortingVisualizer from '../SortingVisualizerX/SortingVisualizer';\n\nconst mapStateToProps = (state) => {\n  return { \n    array: state.unsortedArray, \n    startSort: state.startSort,\n    randomAlgoClicks: state.randomAlgoClicks,\n    isArraySorted: state.isArraySorted\n  }\n};\n\nexport default connect(mapStateToProps)(SortingVisualizer);","import React from 'react';\nimport './Navbar.css';\n\nfunction Navbar(props) {\n    return (\n        <div className=\"nav-bar\">\n            <h2>Sorting Visualizer X</h2>\n            <button onClick={() => props.startSort()}>Start</button>\n            <button onClick={() => props.randomizeAlgo()}>Randomize Algorithms</button>\n            <button onClick={() => props.shuffleArray()}>Shuffle</button>\n            <button>Theme</button>\n        </div>\n    );    \n}\n\nexport default Navbar;","import { connect } from 'react-redux';\nimport Navbar from '../SortingVisualizerX/Navbar';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    shuffleArray: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_SHUFFLE_ARRAY'\n      });\n    },\n    randomizeAlgo: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_RANDOMIZE_ALGO'\n      });\n    },\n    startSort: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_START_SORT'\n      });\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Navbar);\n","import React from 'react';\nimport SortingVisualizerContainer from './containers/SortingVisualizerContainer';\nimport NavbarContainer from './containers/NavbarContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarContainer />\n      <div className=\"grid\">\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n      </div>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}