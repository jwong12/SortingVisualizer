{"version":3,"sources":["redux/sortingVisualizerReducer.js","redux/store.js","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizerX/SortingVisualizer.jsx","containers/SortingVisualizerContainer.js","SortingVisualizerX/Navbar.jsx","containers/NavbarContainer.js","App.js","containers/AppContainer.js","serviceWorker.js","index.js"],"names":["initialState","unsortedArray","shuffleArray","startSort","isArraySorted","randomAlgoClicks","isDarkTheme","primaryColor","secondaryColor","sortedColor","defaultColor","backgroundColor","appBackgroundColor","algoButtonBg","algoButtonColor","algoButtonSelectedBg","algoButtonSelectedColor","arraysSorted","finishSorting","titleColor","min","max","array","i","push","Math","floor","random","sortingVisualizerReducer","state","action","type","Object","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getHeapSortAnimations","animations","arr","length","k","heapify","heapSort","largest","left","right","getMergeSortAnimations","auxiliaryArray","mergeSort","mainArray","startIdx","endIdx","middleIdx","j","merge","getQuickSortAnimations","quickSort","items","index","pivotIndex","pivot","swap","partition","leftIndex","rightIndex","temp","algorithmArray","randomIntFromInterval","SortingVisualizer","props","selectionSort","Algo","componentRef","current","arrayBars","getElementsByClassName","setTimeout","barOneIdx","barOneHeight","barTwoIdx","barTwoHeight","barOneStyle","style","barTwoStyle","height","incrementArraySortedCount","bubbleSort","sortedNumbers","n","barsIndex","color","newHeight","barStyle","countingSort","currentArray","reserveArray","range","handleClickAlgoButton","algo","algorithm","highlightAlgoButton","setState","getSortedArray","React","createRef","String","this","prevProps","prevState","console","error","buttons","id","completedArray","parseInt","jsSortedArray","sort","a","b","quickSorted","slice","log","arrayOne","arrayTwo","arraysAreEqual","className","data-test","ref","map","value","key","onClick","Component","connect","dispatch","Navbar","startSorting","handleMouseOverStartBtn","e","target","cursor","handleMouseLeaveStartBtn","handleMouseOverBtns","handleMouseLeaveBtns","startBtnRef","changeTheme","onMouseOver","onMouseLeave","randomizeAlgo","startBtnBg","App","NavbarContainer","SortingVisualizerContainer","Boolean","location","hostname","match","ReactDOM","render","store","AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4TAEMA,EAAe,CACnBC,cAAeC,IACfC,WAAW,EACXC,eAAe,EACfC,iBAAkB,EAClBC,aAAa,EACbC,aAAc,YACdC,eAAgB,SAChBC,YAAa,UACbC,aAAc,UACdC,gBAAiB,qBACjBC,mBAAoB,QACpBC,aAAc,UACdC,gBAAiB,UACjBC,qBAAsB,oBACtBC,wBAAyB,qBACzBC,aAAc,EACdC,eAAe,EACfC,WAAY,sBAmDd,SAASjB,IAGP,IAFA,IAS6BkB,EAAKC,EAT5BC,EAAQ,GAELC,EAAI,EAAGA,EA1EW,IA0EeA,IACxCD,EAAME,MAMqBJ,EANM,GAMDC,EANK,IAOhCI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,KAJpD,OAAOE,EAOMM,MA9DkB,WAAmC,IAAlCC,EAAiC,uDAAzB7B,EAAc8B,EAAW,uCAC/D,OAAOA,EAAOC,MACZ,IAAK,yBACH,OAAOC,OAAOC,OAAO,GAAIJ,EAAO,CAC9BX,eAAe,EACfD,aAAc,IAElB,IAAK,kCACH,OAAOe,OAAOC,OAAO,GAAIJ,EAAO,CAC9BZ,aAAcY,EAAMZ,aAAa,IAErC,IAAK,mCACH,OAAOe,OAAOC,OAAO,GAAIJ,EAAO,CAC9B5B,cAAeC,IACfC,WAAW,EACXC,eAAe,IAEnB,IAAK,oCACH,OAAO4B,OAAOC,OAAO,GAAIJ,EAAO,CAC9BxB,iBAAkBwB,EAAMxB,iBAAiB,EACzCF,WAAW,IAEf,IAAK,gCACH,OAAO6B,OAAOC,OAAO,GAAIJ,EAAO,CAC9B1B,WAAW,EACXC,eAAe,EACfc,eAAe,IAEnB,IAAK,kCACH,OAAOc,OAAOC,OAAO,GAAIJ,EAAO,CAC9BvB,aAAcuB,EAAMvB,YACpBC,aAAesB,EAAMvB,YAA0B,YAAZ,UACnCE,eAAiBqB,EAAMvB,YAA0B,SAAZ,UACrCG,YAAcoB,EAAMvB,YAA0B,UAAZ,UAClCI,aAAemB,EAAMvB,YAA0B,UAAZ,UACnCK,gBAAkBkB,EAAMvB,YAAkC,qBAApB,kBACtCM,mBAAqBiB,EAAMvB,YAA0B,QAAZ,UACzCO,aAAegB,EAAMvB,YAA0B,UAAZ,UACnCQ,gBAAkBe,EAAMvB,YAA0B,UAAZ,UACtCS,qBAAuBc,EAAMvB,YAAmC,oBAArB,mBAC3CU,wBAA0Ba,EAAMvB,YAAqC,qBAAvB,qBAC9Ca,WAAaU,EAAMvB,YAAoC,qBAAtB,sBAErC,QACE,OAAOuB,IChEAK,cACXN,EACAO,OAAOC,8BAAgCD,OAAOC,gC,kECkC3C,SAASC,EAAsBf,GAClC,IAAMgB,EAAa,GAEnB,OAGJ,SAAkBC,EAAKD,GACnB,IAAIf,EAAIE,KAAKC,MAAMa,EAAIC,OAAS,EAAI,GAChCC,EAAIF,EAAIC,OAAS,EAErB,KAAOjB,GAAK,GACRmB,EAAQH,EAAKA,EAAIC,OAAQjB,EAAGe,GAC5Bf,IAGJ,KAAMkB,GAAK,GAAG,CAAC,IAAD,EACS,CAACF,EAAIE,GAAIF,EAAI,IAA/BA,EAAI,GADK,KACDA,EAAIE,GADH,KAEVH,EAAWd,KAAK,CAACiB,EAAGF,EAAIE,GAAI,EAAGF,EAAI,GAAI,IACvCG,EAAQH,EAAKE,EAAG,EAAGH,GACnBG,KAjBJE,CAASrB,EAAOgB,GACTA,EAsBX,SAASI,EAAQH,EAAKC,EAAQjB,EAAGe,GAC7B,IAAIM,EAAUrB,EACVsB,EAAW,EAAJtB,EAAQ,EACfuB,EAAQD,EAAO,EAYnB,GAVGA,EAAOL,GAAUD,EAAIM,GAAQN,EAAIK,KAChCA,EAAUC,EACVP,EAAWd,KAAK,CAACoB,EAASC,KAG3BC,EAAQN,GAAUD,EAAIO,GAASP,EAAIK,KAClCA,EAAUE,EACVR,EAAWd,KAAK,CAACoB,EAASE,KAG3BF,IAAYrB,EAAG,CACde,EAAWd,KAAK,CAACoB,EAASL,EAAIhB,GAAIA,EAAGgB,EAAIK,KAD3B,MAGW,CAACL,EAAIK,GAAUL,EAAIhB,IAA3CgB,EAAIhB,GAHS,KAGLgB,EAAIK,GAHC,KAIdF,EAAQH,EAAKC,EAAQI,EAASN,GAGlC,OAAOC,EAGJ,SAASQ,EAAuBzB,GACnC,GAAIA,EAAMkB,QAAU,EAAG,OAAOlB,EAE9B,IAAMgB,EAAa,GACbU,EAAc,YAAO1B,GAE3B,OAGJ,SAAS2B,EAAUC,EAAWC,EAAUC,EAAQJ,EAAgBV,GAC5D,GAAIa,IAAaC,EAAQ,OACzB,IAAMC,EAAY5B,KAAKC,OAAOyB,EAAWC,GAAU,GACnDH,EAAUD,EAAgBG,EAAUE,EAAWH,EAAWZ,GAC1DW,EAAUD,EAAgBK,EAAY,EAAGD,EAAQF,EAAWZ,GAIhE,SAAeY,EAAWC,EAAUE,EAAWD,EAAQJ,EAAgBV,GACnE,IAAIG,EAAIU,EACJ5B,EAAI4B,EACJG,EAAID,EAAY,EAEpB,GAAIH,EAAUV,OAAS,IAAOY,GAAU,IAAMD,EAAU,CACpD,KAAO5B,GAAK8B,GAAaC,GAAKF,GAC1Bd,EAAWd,KAAK,CAACD,EAAG+B,EAAG,IACvBhB,EAAWd,KAAK,CAACD,EAAG+B,EAAG,IAEnBN,EAAezB,IAAMyB,EAAeM,IACpChB,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,GAAI,IACvC2B,EAAUT,KAAOO,EAAezB,OAGhCe,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,GAAI,IACvCJ,EAAUT,KAAOO,EAAeM,MAIxC,KAAO/B,GAAK8B,GACRf,EAAWd,KAAK,CAACD,EAAGA,EAAG,IACvBe,EAAWd,KAAK,CAACD,EAAGA,EAAG,IACvBe,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,GAAI,IACvC2B,EAAUT,KAAOO,EAAezB,KAGpC,KAAO+B,GAAKF,GACRd,EAAWd,KAAK,CAAC8B,EAAGA,EAAG,IACvBhB,EAAWd,KAAK,CAAC8B,EAAGA,EAAG,IACvBhB,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,GAAI,IACvCJ,EAAUT,KAAOO,EAAeM,SAEjC,CACH,KAAO/B,GAAK8B,GAAaC,GAAKF,GAC1Bd,EAAWd,KAAK,CAACD,EAAG+B,IACpBhB,EAAWd,KAAK,CAACD,EAAG+B,IAEhBN,EAAezB,IAAMyB,EAAeM,IACpChB,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,KACnC2B,EAAUT,KAAOO,EAAezB,OAGhCe,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,KACnCJ,EAAUT,KAAOO,EAAeM,MAIxC,KAAO/B,GAAK8B,GACRf,EAAWd,KAAK,CAACD,EAAGA,IACpBe,EAAWd,KAAK,CAACD,EAAGA,IACpBe,EAAWd,KAAK,CAACiB,EAAGO,EAAezB,KACnC2B,EAAUT,KAAOO,EAAezB,KAGpC,KAAO+B,GAAKF,GACRd,EAAWd,KAAK,CAAC8B,EAAGA,IACpBhB,EAAWd,KAAK,CAAC8B,EAAGA,IACpBhB,EAAWd,KAAK,CAACiB,EAAGO,EAAeM,KACnCJ,EAAUT,KAAOO,EAAeM,MA9DxCC,CAAML,EAAWC,EAAUE,EAAWD,EAAQJ,EAAgBV,GAT9DW,CAAU3B,EAAO,EAAGA,EAAMkB,OAAS,EAAGQ,EAAgBV,GAC/CA,EA4EJ,SAASkB,EAAuBlC,GACnC,IAAMgB,EAAa,GAEnB,OAGJ,SAASmB,EAAUC,EAAOb,EAAMC,EAAOR,GACnC,IAAIqB,EAEAD,EAAMlB,OAAS,IACfmB,EAcR,SAAmBD,EAAOb,EAAMC,EAAOR,GACnC,IAAMsB,EAAanC,KAAKC,OAAOoB,EAAQD,GAAQ,GACzCgB,EAAQH,EAAME,GAChBrC,EAAIsB,EACJS,EAAIR,EAER,KAAOvB,GAAK+B,GAAG,CACX,KAAOI,EAAMnC,GAAKsC,GACdvB,EAAWd,KAAK,CAACD,EAAGqC,IACpBrC,IAGJ,KAAOmC,EAAMJ,GAAKO,GACdvB,EAAWd,KAAK,CAAC8B,EAAGM,IACpBN,IAGA/B,GAAK+B,IACLQ,EAAKJ,EAAOnC,EAAG+B,GACfhB,EAAWd,KAAK,CAACD,EAAGmC,EAAMnC,GAAI+B,EAAGI,EAAMJ,KACvC/B,IACA+B,KAGR,OAAO/B,EAtCKwC,CAAUL,EAAOb,EAAMC,EAAOR,GAElCO,EAAOc,EAAQ,GACfF,EAAUC,EAAOb,EAAMc,EAAQ,EAAGrB,GAGlCqB,EAAQb,GACRW,EAAUC,EAAOC,EAAOb,EAAOR,IAIvC,OAAOoB,EAnBPD,CAAUnC,EAAO,EAAGA,EAAMkB,OAAS,EAAGF,GAC/BA,EAgDX,SAASwB,EAAKJ,EAAOM,EAAWC,GAC5B,IAAMC,EAAOR,EAAMM,GACnBN,EAAMM,GAAaN,EAAMO,GACzBP,EAAMO,GAAcC,E,UC5NlBC,EAAiB,CAAC,gBAAiB,aAAc,YAAa,WAAY,YAAa,gBAmgB7F,SAASC,EAAsBhD,EAAKC,GAChC,OAAOI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,GAgCzCiD,M,YAhiBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA6FVC,cAAgB,WAKZ,IAJA,IAAMjC,EDxGP,SAAoChB,GAGvC,IAFA,IAAMgB,EAAa,GAEXf,EAAI,EAAGA,EAAID,EAAMkB,OAAS,EAAGjB,IAAK,CAGtC,IAFA,IAAIH,EAAMG,EAEF+B,EAAI/B,EAAE,EAAG+B,EAAIhC,EAAMkB,OAAQc,IAC/BhB,EAAWd,KAAK,CAAC8B,EAAElC,IAEhBE,EAAMgC,GAAKhC,EAAMF,KAChBA,EAAMkC,GAGdQ,EAAKxC,EAAOC,EAAGH,GACfkB,EAAWd,KAAK,CAACD,EAAGD,EAAMC,GAAIH,EAAKE,EAAMF,KAG7C,OAAOkB,ECuFgBkC,CAAgC,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAEnFqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAH5B,WAKTrD,GACL,GAA4B,IAAzBe,EAAWf,GAAGiB,OACbqC,YAAW,WAAO,IAAD,cAC8CvC,EAAWf,GADzD,GACNuD,EADM,KACKC,EADL,KACmBC,EADnB,KAC8BC,EAD9B,KAEPC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACzCD,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MAEAJ,YAAW,WACHC,EAAYE,EACZE,EAAYvE,gBAAkB,EAAK2D,MAAM7D,YAEzC2E,EAAYzE,gBAAkB,EAAK2D,MAAM7D,cAnH1C,GAuHJc,IAAMe,EAAWE,OAAQ,GACxBqC,YAAW,WACUF,EAAU,EAAKL,MAAMhD,MAAMkB,OAAO,GAAG2C,MAC7CxE,gBAAkB,EAAK2D,MAAM7D,YACtC,EAAK6D,MAAMgB,8BA3HZ,OA8HR/D,OAEA,CAAC,IAAD,cAC4Be,EAAWf,GADvC,GACIuD,EADJ,KACeE,EADf,KAEGE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC4E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM/D,aACzC6E,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eA3ItC,OA6IRgB,KAvCFA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IAnGM,EA+InBgE,WAAa,WAMT,IALA,IAAMjD,EDrIP,SAAiChB,GAGpC,IAFA,IAAMgB,EAAa,GAEXf,EAAI,EAAGA,EAAID,EAAMkB,OAAS,EAAGjB,IAGjC,IAFA,IAAMiE,EAAgBlE,EAAMkB,OAAS,EAAIjB,EAEjC+B,EAAI,EAAGA,EAAIkC,EAAelC,IAC9BhB,EAAWd,KAAK,CAAC8B,EAAEA,EAAE,IAElBhC,EAAMgC,EAAE,GAAKhC,EAAMgC,IAClBQ,EAAKxC,EAAOgC,EAAGA,EAAE,GAErBhB,EAAWd,KAAK,CAAC8B,EAAE,EAAGhC,EAAMgC,EAAE,GAAIA,EAAGhC,EAAMgC,KAC3ChB,EAAWd,KAAK,CAAC8B,EAAEA,EAAE,IAG7B,OAAOhB,ECqHgBkC,CAA6B,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAEhFqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAC3Ba,EAAI,IAAKC,EAAY,IAJzB,WAMNnE,GAGL,GAFgBA,EAAI,IAAM,EAEP,CAAC,IAAD,cACgBe,EAAWf,GAD3B,GACRuD,EADQ,KACGE,EADH,KAETE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACnCQ,EAAQpE,EAAI,IAAM,EAAI,EAAK+C,MAAM9D,eAAiB,EAAK8D,MAAM/D,aAEnEsE,YAAW,WACPK,EAAYvE,gBAAkBgF,EAC9BP,EAAYzE,gBAAkBgF,IAnKvB,EAoKRpE,EAAyB,QAG5BsD,YAAW,WAAO,IAAD,cAC8CvC,EAAWf,GADzD,GACNuD,EADM,KACKC,EADL,KACmBC,EADnB,KAC8BC,EAD9B,KAEPC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACzCD,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MAEGD,IAAcS,GAAKX,IAAcW,IAChCZ,YAAW,WACUF,EAAUe,KAAaP,MAC/BxE,gBAAkB,EAAK2D,MAAM7D,cAjLvC,GAoLQ,MAANgF,GACDZ,YAAW,WACUF,EAAU,GAAGQ,MACrBxE,gBAAkB,EAAK2D,MAAM7D,YACtC,EAAK6D,MAAMgB,8BAxLhB,QA4LR/D,EAAyB,IApC3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IArJM,EA8LnB0B,UAAY,WAKR,IAJA,IAAMX,EAAakC,EAA4B,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAE/EqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAHhC,WAKLrD,GAGL,GAFsBA,EAAI,IAAM,EAEb,CAAC,IAAD,cACgBe,EAAWf,GAD3B,GACRuD,EADQ,KACGE,EADH,KAETE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MACnCQ,EAAQpE,EAAI,IAAM,EAAI,EAAK+C,MAAM9D,eAAiB,EAAK8D,MAAM/D,aAEnE,GAA4B,IAAzB+B,EAAWf,GAAGiB,OACbqC,YAAW,WACPK,EAAYvE,gBAAkBgF,EAC9BP,EAAYzE,gBAAkBgF,IAlN3B,EAmNJpE,EAAyB,OAEzB,CAAC,IACGuD,EADJ,YACiBxC,EAAWf,GAD5B,MAEG2D,EAAcP,EAAUG,GAAWK,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM7D,cA1NtC,EA2NJc,EAAyB,QAG7B,CAAC,IAAD,cAC4Be,EAAWf,GADvC,GACIuD,EADJ,KACec,EADf,KAEGV,EAAcP,EAAUG,GAAWK,MAEzCN,YAAW,WACPK,EAAYG,OAAZ,UAAwBO,EAAxB,MAE4B,IAAzBtD,EAAWf,GAAGiB,QACbqC,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM7D,cAC1C,KACJ,KA5OA,EA8ORc,EAAyB,KAxC3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,GA4CTsD,YAAW,kBAAM,EAAKP,MAAMgB,8BAA6B,QA/O1C,EAkPnB3C,SAAW,WAKP,IAJA,IAAML,EAAakC,EAA2B,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAE9EqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAHjC,WAKJrD,GACL,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACIF,EAAWf,GADf,GACpBuD,EADoB,KACTE,EADS,KAErBE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC4E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM/D,aACzC6E,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eAC1C,MAvQI,EAwQRgB,EAAyB,UAEzB,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACyBF,EAAWf,GADpC,GAC3BuD,EAD2B,KAChBC,EADgB,KACFC,EADE,KACSC,EADT,KAE5BC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC4E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYvE,gBAAkB,EAAK2D,MAAM/D,aACzC6E,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eAC1C,MAxRI,EAyRRgB,EAAyB,SAEzB,CAAC,IAAD,cACwDe,EAAWf,GADnE,GACIuD,EADJ,KACeC,EADf,KAC6BC,EAD7B,KACwCC,EADxC,KAEGC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYvE,gBAAkB,EAAK2D,MAAM7D,YACzC2E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPO,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eAC1C,IAEAgB,IAAMe,EAAWE,OAAS,GACzBqC,YAAW,WACPF,EAAU,GAAGQ,MAAMxE,gBAAkB,EAAK2D,MAAM7D,YAChD,EAAK6D,MAAMgB,8BACZ,MA9SA,EAgTR/D,EAAyB,QAtD3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IAvPM,EAkTnBkC,UAAY,WAKR,IAJA,IAAMnB,EAAakC,EAA4B,EAAK3C,MAAM,EAAK4C,aAAaC,SAASpD,OAE/EqD,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAHhC,WAKLrD,GACL,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACIF,EAAWf,GADf,GACpBuD,EADoB,KACTE,EADS,KAErBE,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC4E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM/D,aACzC6E,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eAC1C,MAvUI,EAwURgB,EAAyB,UAEzB,GAA4B,IAAzBe,EAAWf,GAAGiB,OAAc,CAAC,IAAD,cACyBF,EAAWf,GADpC,GAC3BuD,EAD2B,KAChBC,EADgB,KACFC,EADE,KACSC,EADT,KAE5BC,EAAcP,EAAUG,GAAWK,MACnCC,EAAcT,EAAUK,GAAWG,MAEzCN,YAAW,WAWP,GAVAK,EAAYG,OAAZ,UAAwBN,EAAxB,MACAK,EAAYC,OAAZ,UAAwBJ,EAAxB,MACAC,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC4E,EAAYzE,gBAAkB,EAAK2D,MAAM9D,eAEzCqE,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM/D,aACzC6E,EAAYzE,gBAAkB,EAAK2D,MAAM/D,eAC1C,IAEAgB,IAAMe,EAAWE,OAAS,EAAG,CAC5B,IAD6B,IAAD,WACpBjB,GACJ,IAAMsE,EAAWlB,EAAUpD,GAAG4D,MAE9BN,YAAW,WACPgB,EAASlF,gBAAkB,EAAK2D,MAAM9D,eAEtCqE,YAAW,WACPgB,EAASlF,gBAAkB,EAAK2D,MAAM7D,cACnC,IAAJc,KACA,IAAJA,IATCA,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IAAM,EAAnCA,GAYRsD,YAAW,kBAAM,EAAKP,MAAMgB,8BAA6B,SAvWtD,EAyWR/D,EAAyB,OA/C3BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,IAvTM,EA2WnBuE,aAAe,WAMX,IALA,IAAMC,EAAe,EAAKlE,MAAM,EAAK4C,aAAaC,SAASpD,MACrDgB,EDlJP,SAAmChB,GAKtC,IAJA,IAAMgB,EAAa,GACb0D,EAAe,GACjB3E,EAAMC,EAAM,GAAIF,EAAME,EAAM,GAExBC,EAAI,EAAGA,EAAID,EAAMkB,OAAQjB,IAC1BD,EAAMC,GAAKF,IACVA,EAAMC,EAAMC,IAGbD,EAAMC,GAAKH,IACVA,EAAME,EAAMC,IAMpB,IAFA,IAAM0E,EAAQ5E,EAAMD,EAAM,EAElBkC,EAAI,EAAGA,EAAI2C,EAAO3C,IACtB0C,EAAa1C,GAAK,EAGtB,IAAI,IAAI/B,EAAI,EAAGA,EAAID,EAAMkB,OAAQjB,IAC7ByE,EAAa1E,EAAMC,GAAKH,KAG5B,IAAI,IAAIkC,EAAI,EAAGA,EAAI2C,EAAO3C,IACtB0C,EAAa1C,GAAK0C,EAAa1C,EAAE,GAAK0C,EAAa1C,GAGvD,IAAI,IAAI/B,EAAID,EAAMkB,OAAS,EAAGjB,GAAK,EAAGA,IAAK,CACvC,IAAI+B,EAAIhC,EAAMC,GAAKH,EACnBkB,EAAWd,KAAK,CAACwE,EAAa1C,GAAK,EAAG/B,IACtCyE,EAAa1C,KAGjB,OAAOhB,EC+GgBkC,CAA+BuB,GAE5CpB,EADO,EAAKF,aAAaC,QACRE,uBAAuB,aAJ7B,WAMTrD,GACJ,IAAMsE,EAAWlB,EAAUpD,GAAG4D,MAE9BN,YAAW,WACPgB,EAASlF,gBAAkB,EAAK2D,MAAM9D,eAEtCqE,YAAW,WACPgB,EAASlF,gBAAkB,EAAK2D,MAAM/D,eA3X/B,GA6XPgB,EAAI,IAA2B,KA7XxB,GA8XXA,EAAI,IAA2B,KAV/BA,EAAI,EAAGA,EAAIwE,EAAavD,OAAQjB,IAAM,EAAtCA,GAaRsD,YAAW,WACP,IADc,IAAD,WACLtD,GACJ,IAAMuD,EAAYxC,EAAWf,GAAG,GAC1ByD,EAAY1C,EAAWf,GAAG,GAC1B2D,EAAcP,EAAUG,GAAWK,MAEzCN,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM9D,eACzC0E,EAAYG,OAAZ,UAAwBU,EAAaf,GAArC,MAEAH,YAAW,WACPK,EAAYvE,gBAAkB,EAAK2D,MAAM7D,cA5YtC,GA8YHc,EAAI,IAA2B,KA9Y5B,GA+YPA,EAAI,IAA2B,KAb/BA,EAAI,EAAGA,EAAIe,EAAWE,OAAQjB,IAAM,EAApCA,KAeT,MAEHsD,YAAW,kBAAM,EAAKP,MAAMgB,8BAA6B,QAhZ1C,EAoanBY,sBAAwB,SAACC,GACrB,IAAMC,EAAY,EAAKC,oBAAoBF,GAExC,EAAK7B,MAAMlE,cACV,EAAKkG,SAAL,eACK,EAAK7B,aAAaC,QAAU,CACzBpD,MAAO,EAAKiF,iBACZH,eAIR,EAAKE,SAAL,eACK,EAAK7B,aAAaC,QAAU,CACzBpD,MAAM,YAAK,EAAKgD,MAAMhD,OACtB8E,gBAhbZ,EAAK3B,aAAe+B,IAAMC,YAC1B,EAAKhC,aAAaC,QAAUN,EAAsB,EAAG,KACrD,EAAKvC,MAAL,eACK,EAAK4C,aAAaC,QAAU,CACzBpD,MAAO,GACP8E,UAAWM,SAPJ,E,iFAaf,IAAMN,EAAYO,KAAKN,oBAAoBlC,EAAeC,EAAsB,EAAED,EAAe3B,OAAO,KACxGmE,KAAKL,SAAL,eACKK,KAAKlC,aAAaC,QAAU,CACzBpD,MAAM,YAAKqF,KAAKrC,MAAMhD,OACtB8E,iB,yCAKOQ,EAAWC,GAC1B,GAAID,EAAUtF,QAAUqF,KAAKrC,MAAMhD,MAAO,CAItC,IAHA,IACMqD,EADOgC,KAAKlC,aAAaC,QACRE,uBAAuB,aAEtCrD,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IACjCoD,EAAUpD,GAAG4D,MAAMxE,gBAAkBgG,KAAKrC,MAAM5D,aAEpD,IAAMR,EAAY,YAAOyG,KAAKrC,MAAMhD,OAEpCqF,KAAKL,SAAL,eACKK,KAAKlC,aAAaC,QAAU,CACzBpD,MAAOpB,EACPkG,UAAWS,EAAUF,KAAKlC,aAAaC,SAAS0B,aAK5D,GAAIQ,EAAUvG,mBAAqBsG,KAAKrC,MAAMjE,iBAAkB,CAC5D,IAAM+F,EAAYO,KAAKN,oBAAoBlC,EAAeC,EAAsB,EAAED,EAAe3B,OAAO,KAErGmE,KAAKrC,MAAMlE,cACVuG,KAAKL,SAAL,eACKK,KAAKlC,aAAaC,QAAU,CACzBpD,MAAOqF,KAAKJ,iBACZH,eAIRO,KAAKL,SAAL,eACKK,KAAKlC,aAAaC,QAAU,CACzBpD,MAAM,YAAKqF,KAAKrC,MAAMhD,OACtB8E,eAMhB,GAAIQ,EAAUzG,YAAcwG,KAAKrC,MAAMnE,WAAawG,KAAKrC,MAAMnE,UAC3D,OAAOwG,KAAK9E,MAAM8E,KAAKlC,aAAaC,SAAS0B,WACzC,KAAKjC,EAAe,GAChBwC,KAAKpC,gBACL,MACJ,KAAKJ,EAAe,GAChBwC,KAAKpB,aACL,MACJ,KAAKpB,EAAe,GAChBwC,KAAK1D,YACL,MACJ,KAAKkB,EAAe,GAChBwC,KAAKhE,WACL,MACJ,KAAKwB,EAAe,GAChBwC,KAAKlD,YACL,MACJ,KAAKU,EAAe,GAChBwC,KAAKb,eACL,MACJ,QACIgB,QAAQC,MAAM,yBAItBH,EAAUtG,cAAgBqG,KAAKrC,MAAMhE,aACrCqG,KAAKN,oBAAoBM,KAAK9E,MAAM8E,KAAKlC,aAAaC,SAAS0B,WAG/DQ,EAAU3F,eAAiB0F,KAAKrC,MAAMrD,cAA4C,IAA5B0F,KAAKrC,MAAMrD,cACjE0F,KAAKrC,MAAMpD,kB,0CAyTCkF,GAIhB,IAHA,IACMY,EADOL,KAAKlC,aAAaC,QACVE,uBAAuB,gBAEpCrD,EAAI,EAAGA,EAAIyF,EAAQxE,OAAQjB,IAC5B6E,IAAcY,EAAQzF,GAAG0F,IACxBD,EAAQzF,GAAG4D,MAAMQ,MAAQgB,KAAKrC,MAAMtD,wBACpCgG,EAAQzF,GAAG4D,MAAMxE,gBAAkBgG,KAAKrC,MAAMvD,uBAE9CiG,EAAQzF,GAAG4D,MAAMQ,MAAQgB,KAAKrC,MAAMxD,gBACpCkG,EAAQzF,GAAG4D,MAAMxE,gBAAkBgG,KAAKrC,MAAMzD,cAItD,OAAOuF,I,uCA4BP,IAJA,IACMzB,EADOgC,KAAKlC,aAAaC,QACRE,uBAAuB,aACxCsC,EAAiB,GAEf3F,EAAI,EAAGA,EAAIoD,EAAUnC,OAAQjB,IACjC2F,EAAe1F,KAAK2F,SAASxC,EAAUpD,GAAG4D,MAAME,SAGpD,OAAO6B,I,8CAIP,IAAME,EAAgBT,KAAKrC,MAAMhD,MAAM+F,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACpDC,EAAchD,EAA4BmC,KAAKrC,MAAMhD,MAAMmG,SACjEX,QAAQY,IAAIN,GACZN,QAAQY,IAAIF,GACZV,QAAQY,IA0DhB,SAAwBC,EAAUC,GAC9B,GAAID,EAASnF,SAAWoF,EAASpF,OAAQ,OAAO,EAEhD,IAAK,IAAIjB,EAAI,EAAGA,EAAIoG,EAASnF,OAAQjB,IACjC,GAAIoG,EAASpG,KAAOqG,EAASrG,GACzB,OAAO,EAGf,OAAO,EAlESsG,CAAeT,EAAeI,M,+BAGpC,IAAD,OACL,OACI,yBACIM,UAAU,SACV3C,MAAO,CAAExE,gBAAiBgG,KAAKrC,MAAM3D,iBACrCoH,YAAU,sBAEV,yBACID,UAAU,iBACVC,YAAU,UACVC,IAAKrB,KAAKlC,cAEV,yBACIqD,UAAU,kBACVC,YAAU,aAETpB,KAAK9E,MAAM8E,KAAKlC,aAAaC,SAASpD,MAAM2G,KAAI,SAACC,EAAM3G,GACpD,OACI,yBACIuG,UAAU,YACVK,IAAK5G,EACL4D,MAAO,CACHxE,gBAAiB,EAAK2D,MAAM5D,aAC5B2E,OAAO,GAAD,OAAK6C,EAAL,YAKtB,yBACIJ,UAAU,aACVC,YAAU,SACV5C,MAAO,CAAEE,OAAO,YAGxB,yBACIyC,UAAU,WACVC,YAAU,iBAEV,4BAAQD,UAAU,eAAeb,GAAG,gBAAgBmB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAA7G,iBACA,4BAAQ2D,UAAU,eAAeb,GAAG,aAAamB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAA1G,cACA,4BAAQ2D,UAAU,eAAeb,GAAG,YAAYmB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAAzG,aACA,4BAAQ2D,UAAU,eAAeb,GAAG,WAAWmB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAAxG,YACA,4BAAQ2D,UAAU,eAAeb,GAAG,YAAYmB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAAzG,aACA,4BAAQ2D,UAAU,eAAeb,GAAG,eAAemB,QAAS,kBAAM,EAAKlC,sBAAsB/B,EAAe,MAA5G,uB,GAxfQkE,aC8BjBC,eApBS,SAACzG,GACvB,MAAO,CACLP,MAAOO,EAAM5B,cACbE,UAAW0B,EAAM1B,UACjBE,iBAAkBwB,EAAMxB,iBACxBD,cAAeyB,EAAMzB,cACrBE,YAAauB,EAAMvB,YACnBC,aAAcsB,EAAMtB,aACpBC,eAAgBqB,EAAMrB,eACtBC,YAAaoB,EAAMpB,YACnBC,aAAcmB,EAAMnB,aACpBC,gBAAiBkB,EAAMlB,gBACvBE,aAAcgB,EAAMhB,aACpBC,gBAAiBe,EAAMf,gBACvBC,qBAAsBc,EAAMd,qBAC5BC,wBAAyBa,EAAMb,wBAC/BC,aAAcY,EAAMZ,iBA/BG,SAACsH,GAC1B,MAAO,CACLrH,cAAe,WACbqH,EAAS,CACPxG,KAAM,4BAGVuD,0BAA2B,WACzBiD,EAAS,CACPxG,KAAM,wCA0BCuG,CAA6CjE,GC+E7CmE,G,kBAhHX,WAAYlE,GAAQ,IAAD,8BACf,4CAAMA,KAYVmE,aAAe,WACN,EAAKnE,MAAMlE,eACZ,EAAKkE,MAAMnE,aAfA,EAmBnBuI,wBAA0B,SAACC,GACnB,EAAKrE,MAAMpD,gBAAkB,EAAKoD,MAAMlE,eACxCuI,EAAEC,OAAOzD,MAAMxE,gBAAkB,UACjCgI,EAAEC,OAAOzD,MAAM0D,OAAS,WAGxBF,EAAEC,OAAOzD,MAAM0D,OAAS,WAzBb,EA6BnBC,yBAA2B,SAACH,GACpB,EAAKrE,MAAMpD,gBACXyH,EAAEC,OAAOzD,MAAMxE,gBAAkB,YA/BtB,EAmCnBoI,oBAAsB,SAACJ,GACf,EAAKrE,MAAMpD,eACXyH,EAAEC,OAAOzD,MAAMxE,gBAAkB,UACjCgI,EAAEC,OAAOzD,MAAM0D,OAAS,YAGxBF,EAAEC,OAAOzD,MAAMxE,gBAAkB,UACjCgI,EAAEC,OAAOzD,MAAM0D,OAAS,YA1Cb,EA8CnBG,qBAAuB,SAACL,GACpBA,EAAEC,OAAOzD,MAAMxE,gBAAkB,WA7CjC,EAAKsI,YAAczC,IAAMC,YACzBK,QAAQY,IAAI,EAAK7F,OAHF,E,gFAOA+E,EAAWC,GACvBD,EAAU1F,gBAAkByF,KAAKrC,MAAMpD,eAAiByF,KAAKrC,MAAMpD,gBAClEyF,KAAKsC,YAAYvE,QAAQS,MAAMxE,gBAAkB,a,+BAyC/C,IAAD,OACL,OACI,yBACImH,UAAU,UACVC,YAAU,iBAEV,wBACIA,YAAU,QACV5C,MAAO,CAAEQ,MAAOgB,KAAKrC,MAAMnD,aAF/B,sBAIA,4BACIiH,QAAS,WACD,EAAK9D,MAAMpD,eACX,EAAKoD,MAAM4E,eAGnBC,YAAaxC,KAAKoC,oBAClBK,aAAczC,KAAKqC,sBAPvB,SASA,4BACIZ,QAAS,WACD,EAAK9D,MAAMpD,eACX,EAAKoD,MAAM+E,iBAGnBF,YAAaxC,KAAKoC,oBAClBK,aAAczC,KAAKqC,sBAPvB,aASA,4BACIZ,QAAS,WACD,EAAK9D,MAAMpD,eACX,EAAKoD,MAAMpE,gBAGnBiJ,YAAaxC,KAAKoC,oBAClBK,aAAczC,KAAKqC,sBAPvB,WASA,4BACIhB,IAAKrB,KAAKsC,YACV9D,MAAO,CAAExE,gBAAiBgG,KAAKrC,MAAMgF,YACrClB,QAAS,SAACO,GACNA,EAAEC,OAAOzD,MAAM0D,OAAS,UACxB,EAAKJ,gBAETU,YAAaxC,KAAK+B,wBAClBU,aAAczC,KAAKmC,0BARvB,a,GAxFKtC,IAAM6B,YCgCZC,eARS,SAACzG,GACvB,MAAO,CACLV,WAAYU,EAAMV,WAClBD,cAAeW,EAAMX,cACrBd,cAAeyB,EAAMzB,kBA7BE,SAACmI,GAC1B,MAAO,CACLrI,aAAc,WACZqI,EAAS,CACPxG,KAAM,sCAGVsH,cAAe,WACbd,EAAS,CACPxG,KAAM,uCAGV5B,UAAW,WACToI,EAAS,CACPxG,KAAM,mCAGVmH,YAAa,WACXX,EAAS,CACPxG,KAAM,wCAcCuG,CAA6CE,G,MCL7Ce,MAzBf,SAAajF,GACX,OACE,yBACEwD,UAAU,MACVC,YAAU,gBACV5C,MAAO,CAAExE,gBAAiB2D,EAAM1D,qBAEhC,kBAAC4I,EAAD,MACA,yBACE1B,UAAU,OACVC,YAAU,YAEV,kBAAC0B,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,SCZOnB,eANS,SAACzG,GACvB,MAAO,CACLjB,mBAAoBiB,EAAMjB,sBAIf0H,CAAyBiB,GCGpBG,QACW,cAA7BvH,OAAOwH,SAASC,UAEe,UAA7BzH,OAAOwH,SAASC,UAEhBzH,OAAOwH,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAACC,EAAD,OAENC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACLD,QAAQC,MAAMA,EAAM4D,c","file":"static/js/main.27504fd7.chunk.js","sourcesContent":["const NUMBER_OF_ARRAY_BARS = 120;\n\nconst initialState = {\n  unsortedArray: shuffleArray(),\n  startSort: false,\n  isArraySorted: false,\n  randomAlgoClicks: 0,\n  isDarkTheme: false,\n  primaryColor: 'darkkhaki',\n  secondaryColor: 'tomato',\n  sortedColor: '#6ad4f7',\n  defaultColor: '#b0b0b0',\n  backgroundColor: 'rgb(241, 241, 241)',\n  appBackgroundColor: 'white',\n  algoButtonBg: '#ffffff',\n  algoButtonColor: '#494949',\n  algoButtonSelectedBg: 'rgb(73, 151, 249)',\n  algoButtonSelectedColor: 'rgb(247, 247, 247)',\n  arraysSorted: 0,\n  finishSorting: true,\n  titleColor: 'rgb(101, 196, 226)',\n};\n\nconst sortingVisualizerReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'NAV_BAR_FINISH_SORTING':\n        return Object.assign({}, state, {\n          finishSorting: true,\n          arraysSorted: 0\n        });\n      case 'SORTING_VISUALIZER_ARRAY_SORTED':\n        return Object.assign({}, state, {\n          arraysSorted: state.arraysSorted+1\n        }); \n      case 'SORTING_VISUALIZER_SHUFFLE_ARRAY': \n        return Object.assign({}, state, {\n          unsortedArray: shuffleArray(),\n          startSort: false,\n          isArraySorted: false,\n        });\n      case 'SORTING_VISUALIZER_RANDOMIZE_ALGO': \n        return Object.assign({}, state, {\n          randomAlgoClicks: state.randomAlgoClicks+1,\n          startSort: false\n      });\n      case 'SORTING_VISUALIZER_START_SORT':\n        return Object.assign({}, state, {\n          startSort: true,\n          isArraySorted: true,\n          finishSorting: false\n        })   \n      case 'SORTING_VISUALIZER_CHANGE_THEME':\n        return Object.assign({}, state, {\n          isDarkTheme: !state.isDarkTheme,\n          primaryColor: !state.isDarkTheme ? '#ab9d78' : 'darkkhaki',\n          secondaryColor: !state.isDarkTheme ? '#822c2c' : 'tomato',\n          sortedColor: !state.isDarkTheme ? '#2f787d' : '#6ad4f7', \n          defaultColor: !state.isDarkTheme ? '#71868f' : '#b0b0b0',\n          backgroundColor: !state.isDarkTheme ? 'rgb(45, 45, 45)' : 'rgb(241, 241, 241)',\n          appBackgroundColor: !state.isDarkTheme ? '#3a3a3a' : 'white',\n          algoButtonBg: !state.isDarkTheme ? '#8a8a8a' : '#ffffff',\n          algoButtonColor: !state.isDarkTheme ? '#212121' : '#494949',\n          algoButtonSelectedBg: !state.isDarkTheme ? 'rgb(5, 105, 154)' : 'rgb(73, 151, 249)',\n          algoButtonSelectedColor: !state.isDarkTheme ? 'rgb(206, 206, 206)' : 'rgb(247, 247, 247)',\n          titleColor: !state.isDarkTheme ? 'rgb(83, 147, 167)' : 'rgb(101, 196, 226)',\n        })    \n      default: \n        return state;\n    }\n  }\n\nfunction shuffleArray() {\n  const array = [];\n\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    array.push(randomIntFromInterval(10, 330));\n  }\n\n  return array;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n  \nexport default sortingVisualizerReducer;","import { createStore } from 'redux';\nimport sortingVisualizerReducer from './sortingVisualizerReducer';\n\nexport default createStore(\n    sortingVisualizerReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export function getSelectionSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        let min = i;\n\n        for(let j = i+1; j < array.length; j++) {\n            animations.push([j,min]);\n\n            if(array[j] < array[min]) {\n                min = j;\n            }\n        }\n        swap(array, i, min);\n        animations.push([i, array[i], min, array[min]]);\n    }\n\n    return animations;\n};\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        const sortedNumbers = array.length - 1 - i; \n\n        for(let j = 0; j < sortedNumbers; j++) {\n            animations.push([j,j+1]);\n\n            if(array[j+1] < array[j]) {\n                swap(array, j, j+1);\n            } \n            animations.push([j+1, array[j+1], j, array[j]]);\n            animations.push([j,j+1]);\n        }\n    }\n    return animations;\n};\n\nexport function getHeapSortAnimations(array) {\n    const animations = []\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(arr, animations) {\n    let i = Math.floor(arr.length / 2 - 1);\n    let k = arr.length - 1;\n    \n    while (i >= 0) {\n        heapify(arr, arr.length, i, animations);\n        i--;\n    }\n\n    while(k >= 0) {\n        [arr[0], arr[k]] = [arr[k], arr[0]];\n        animations.push([k, arr[k], 0, arr[0], 0]);\n        heapify(arr, k, 0, animations);\n        k--;\n    }\n\n    return arr;\n}\n\nfunction heapify(arr, length, i, animations) {\n    let largest = i;\n    let left = i * 2 + 1;\n    let right = left + 1;\n\n    if(left < length && arr[left] > arr[largest]) {\n        largest = left;\n        animations.push([largest, left]);\n    }\n\n    if(right < length && arr[right] > arr[largest]) {\n        largest = right;\n        animations.push([largest, right]);\n    }\n\n    if(largest !== i) {\n        animations.push([largest, arr[i], i, arr[largest]]);\n\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, length, largest, animations);\n    }\n\n    return arr;\n}\n\nexport function getMergeSortAnimations(array) {\n    if (array.length <= 1) return array;\n\n    const animations = [];\n    const auxiliaryArray = [...array];\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    if((mainArray.length - 1) === endIdx && 0 === startIdx) {\n        while (i <= middleIdx && j <= endIdx) {            \n            animations.push([i, j, 0]);\n            animations.push([i, j, 0]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i], 0]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j], 0]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i, 0]);\n            animations.push([i, i, 0]);\n            animations.push([k, auxiliaryArray[i], 0]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j, 0]);\n            animations.push([j, j, 0]);\n            animations.push([k, auxiliaryArray[j], 0]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    } else {\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push([i, j]);\n            animations.push([i, j]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i]]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j]]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i]);\n            animations.push([i, i]);\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j]);\n            animations.push([j, j]);\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }    \n    \n}\n\nexport function getQuickSortAnimations(array) {\n    const animations = []\n    quickSort(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quickSort(items, left, right, animations) {\n    let index;\n\n    if (items.length > 1) {\n        index = partition(items, left, right, animations);\n        \n        if (left < index - 1) {\n            quickSort(items, left, index - 1, animations);\n        }\n\n        if (index < right) {\n            quickSort(items, index, right, animations);\n        }\n    }\n\n    return items;\n}\n\nfunction partition(items, left, right, animations) {\n    const pivotIndex = Math.floor((right + left) / 2);\n    const pivot = items[pivotIndex];\n    let i = left; \n    let j = right;\n\n    while (i <= j) {\n        while (items[i] < pivot) {\n            animations.push([i, pivotIndex]);\n            i++;\n        }\n\n        while (items[j] > pivot) {\n            animations.push([j, pivotIndex]);\n            j--;\n        }\n\n        if (i <= j) {\n            swap(items, i, j);\n            animations.push([i, items[i], j, items[j]]);\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nfunction swap(items, leftIndex, rightIndex){\n    const temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\n  \nexport function getCountingSortAnimations(array) {\n    const animations = [];\n    const reserveArray = [];\n    let max = array[0], min = array[0];\n\n    for(let i = 0; i < array.length; i++) {\n        if(array[i] > max) { \n            max = array[i];\n        }\n\n        if(array[i] < min) {\n            min = array[i];\n        }\n    }\n\n    const range = max - min + 1;\n\n    for(let j = 0; j < range; j++) {\n        reserveArray[j] = 0;\n    }\n\n    for(let i = 0; i < array.length; i++) {\n        reserveArray[array[i] - min]++;\n    }\n\n    for(let j = 1; j < range; j++) {\n        reserveArray[j] = reserveArray[j-1] + reserveArray[j];\n    }\n\n    for(let i = array.length - 1; i >= 0; i--) {\n        let j = array[i] - min;\n        animations.push([reserveArray[j] - 1, i]);\n        reserveArray[j]--;\n    }\n\n    return animations;\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Algo from '../sortingAlgorithms/sortingAlgorithms';\nimport './SortingVisualizer.css';\n\nconst algorithmArray = ['selectionSort', 'bubbleSort', 'mergeSort', 'heapSort', 'quickSort', 'countingSort'];\nconst ANIMATION_SPEED_MS = 2;\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.componentRef = React.createRef();\n        this.componentRef.current = randomIntFromInterval(0, 1000000);\n        this.state = {\n            [this.componentRef.current]: {\n                array: [],\n                algorithm: String\n            }\n        };\n    }\n    \n    componentDidMount() {\n        const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n        this.setState({            \n            [this.componentRef.current]: {\n                array: [...this.props.array],\n                algorithm\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.array !== this.props.array) {\n            const node = this.componentRef.current;\n            const arrayBars = node.getElementsByClassName('array-bar');\n\n            for(let i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = this.props.defaultColor;\n            }\n            const shuffleArray = [...this.props.array];\n\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: shuffleArray,\n                    algorithm: prevState[this.componentRef.current].algorithm\n                }\n            });   \n        }\n\n        if (prevProps.randomAlgoClicks !== this.props.randomAlgoClicks) {\n            const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n\n            if(this.props.isArraySorted) {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: this.getSortedArray(),\n                        algorithm\n                    }\n                }); \n            } else {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: [...this.props.array],\n                        algorithm\n                    }\n                }); \n            }            \n        }\n\n        if (prevProps.startSort !== this.props.startSort && this.props.startSort) {\n            switch(this.state[this.componentRef.current].algorithm) {\n                case algorithmArray[0]:\n                    this.selectionSort();\n                    break;\n                case algorithmArray[1]:\n                    this.bubbleSort();\n                    break;\n                case algorithmArray[2]:\n                    this.mergeSort();\n                    break;\n                case algorithmArray[3]:\n                    this.heapSort();\n                    break;\n                case algorithmArray[4]:\n                    this.quickSort();\n                    break;\n                case algorithmArray[5]:\n                    this.countingSort();\n                    break;\n                default:\n                    console.error('no algorithm selected')\n            }\n        }\n\n        if (prevProps.isDarkTheme !== this.props.isDarkTheme) {\n            this.highlightAlgoButton(this.state[this.componentRef.current].algorithm);\n        }\n\n        if (prevProps.arraysSorted !== this.props.arraysSorted && this.props.arraysSorted === 4) {\n            this.props.finishSorting();\n        }\n    }\n\n    selectionSort = () => {\n        const animations = Algo.getSelectionSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        \n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 4) {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    setTimeout(() => {                            \n                        if (barOneIdx < barTwoIdx) {\n                            barOneStyle.backgroundColor = this.props.sortedColor;\n                        } else {\n                            barTwoStyle.backgroundColor = this.props.sortedColor;\n                        }\n                    }, ANIMATION_SPEED_MS); \n\n                    if(i === animations.length -1) {\n                        setTimeout(() => {\n                            const barStyle = arrayBars[this.props.array.length-1].style;\n                            barStyle.backgroundColor = this.props.sortedColor;\n                            this.props.incrementArraySortedCount();\n                        }, ANIMATION_SPEED_MS);  \n                    }     \n                }, i * ANIMATION_SPEED_MS);\n\n            } else {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;                    \n                    }, ANIMATION_SPEED_MS);\n                }, i * ANIMATION_SPEED_MS);                \n            }\n        }\n    }\n\n    bubbleSort = () => {\n        const animations = Algo.getBubbleSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let isColorChange, n = 119, barsIndex = 119; \n\n        for (let i = 0; i < animations.length; i++) {\n            isColorChange = i % 3 !== 1;\n\n            if (isColorChange) { \n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 !== 2 ? this.props.secondaryColor : this.props.primaryColor; \n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS / 3);\n\n            } else {                \n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    if(barTwoIdx === n || barOneIdx === n) {\n                        setTimeout(() => {                            \n                            const barStyle = arrayBars[barsIndex--].style;\n                            barStyle.backgroundColor = this.props.sortedColor;\n                        }, ANIMATION_SPEED_MS);     \n\n                        if(--n === 0) {\n                            setTimeout(() => {\n                                const barStyle = arrayBars[0].style;\n                                barStyle.backgroundColor = this.props.sortedColor;\n                                this.props.incrementArraySortedCount();\n                            }, ANIMATION_SPEED_MS);   \n                        }\n                    }                \n                }, i * ANIMATION_SPEED_MS / 3);                \n            }\n        }\n    }\n\n    mergeSort = () => {\n        const animations = Algo.getMergeSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = i % 3 !== 2; \n\n            if (isColorChange) { \n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? this.props.secondaryColor : this.props.primaryColor;              \n\n                if(animations[i].length !== 3) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * ANIMATION_SPEED_MS * 3);\n\n                } else {\n                    const [barOneIdx] = animations[i]; \n                    const barOneStyle = arrayBars[barOneIdx].style;\n\n                    setTimeout(() => {                    \n                        barOneStyle.backgroundColor = this.props.sortedColor;\n                    }, i * ANIMATION_SPEED_MS * 3);    \n                }\n\n            } else {\n                const [barOneIdx, newHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                \n                setTimeout(() => {                    \n                    barOneStyle.height = `${newHeight}px`;\n\n                    if(animations[i].length === 3) {\n                        setTimeout(() => {                    \n                            barOneStyle.backgroundColor = this.props.secondaryColor;\n\n                            setTimeout(() => {                    \n                                barOneStyle.backgroundColor = this.props.sortedColor;\n                            }, 1); \n                        }, 0);    \n                    }\n                }, i * ANIMATION_SPEED_MS * 3);              \n            }\n        }\n\n        setTimeout(() => this.props.incrementArraySortedCount(), 14500);\n    }\n\n    heapSort = () => {\n        const animations = Algo.getHeapSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 2) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10);\n                }, i * ANIMATION_SPEED_MS * 4.7);\n                \n            } else if(animations[i].length === 4) {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.backgroundColor = this.props.secondaryColor;                  \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {   \n                        barOneStyle.height = `${barOneHeight}px`;\n                        barTwoStyle.height = `${barTwoHeight}px`;                      \n                        barOneStyle.backgroundColor = this.props.primaryColor;                  \n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10)\n                }, i * ANIMATION_SPEED_MS * 4.7); \n\n            } else {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barOneStyle.backgroundColor = this.props.sortedColor;     \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;  \n\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = this.props.primaryColor;  \n                    }, 10) \n\n                    if(i === animations.length - 1) {\n                        setTimeout(() => {\n                            arrayBars[0].style.backgroundColor = this.props.sortedColor;   \n                            this.props.incrementArraySortedCount();\n                        }, 10);\n                    }   \n                }, i * ANIMATION_SPEED_MS * 4.75); \n            }            \n        }\n    }\n\n    quickSort = () => {\n        const animations = Algo.getQuickSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 2) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barTwoStyle.backgroundColor = this.props.secondaryColor;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;\n                        barTwoStyle.backgroundColor = this.props.primaryColor;\n                    }, 10);\n                }, i * ANIMATION_SPEED_MS * 8.2);\n\n            } else if(animations[i].length === 4) {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barOneStyle.backgroundColor = this.props.secondaryColor;     \n                    barTwoStyle.backgroundColor = this.props.secondaryColor;  \n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.primaryColor;     \n                        barTwoStyle.backgroundColor = this.props.primaryColor;  \n                    }, 10) \n\n                    if(i === animations.length - 1) {\n                        for(let i = 0; i < arrayBars.length; i++) {\n                            const barStyle = arrayBars[i].style;\n            \n                            setTimeout(() => {\n                                barStyle.backgroundColor = this.props.secondaryColor;    \n\n                                setTimeout(() => {\n                                    barStyle.backgroundColor = this.props.sortedColor;     \n                                }, i * 0.05)  \n                            }, i * 8.5) \n                        }\n\n                        setTimeout(() => this.props.incrementArraySortedCount(), 1500);\n                    }   \n                }, i * ANIMATION_SPEED_MS * 8.2); \n            }          \n        }\n    }\n\n    countingSort = () => {\n        const currentArray = this.state[this.componentRef.current].array;\n        const animations = Algo.getCountingSortAnimations(currentArray);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for(let i = 0; i < currentArray.length; i++) {\n            const barStyle = arrayBars[i].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = this.props.secondaryColor;\n\n                setTimeout(() => {\n                    barStyle.backgroundColor = this.props.primaryColor;\n                \n                }, (i + 15) * ANIMATION_SPEED_MS / 4);\n            }, (i + 15) * ANIMATION_SPEED_MS * 25);\n        }\n\n        setTimeout(() => {\n            for(let i = 0; i < animations.length; i++) {\n                const barOneIdx = animations[i][0];\n                const barTwoIdx = animations[i][1];\n                const barOneStyle = arrayBars[barOneIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = this.props.secondaryColor;\n                    barOneStyle.height = `${currentArray[barTwoIdx]}px`;\n                    \n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = this.props.sortedColor;\n\n                    }, (i + 15) * ANIMATION_SPEED_MS / 3);\n                }, (i + 15) * ANIMATION_SPEED_MS * 30); \n            }\n        }, 6700);\n\n        setTimeout(() => this.props.incrementArraySortedCount(), 14500);\n    }\n\n    highlightAlgoButton(algorithm) {\n        const node = this.componentRef.current;\n        const buttons = node.getElementsByClassName('algo-buttons');\n\n        for(let i = 0; i < buttons.length; i++) {\n            if(algorithm === buttons[i].id){\n                buttons[i].style.color = this.props.algoButtonSelectedColor;\n                buttons[i].style.backgroundColor = this.props.algoButtonSelectedBg;\n            } else {\n                buttons[i].style.color = this.props.algoButtonColor;\n                buttons[i].style.backgroundColor = this.props.algoButtonBg;\n            }\n        }        \n\n        return algorithm;\n    }\n\n    handleClickAlgoButton = (algo) => {\n        const algorithm = this.highlightAlgoButton(algo);\n\n        if(this.props.isArraySorted) {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: this.getSortedArray(),\n                    algorithm\n                }\n            });            \n        } else {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: [...this.props.array],\n                    algorithm\n                }\n            });\n        }\n    }\n\n    getSortedArray() {\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        const completedArray = [];\n\n        for(let i = 0; i < arrayBars.length; i++) {\n            completedArray.push(parseInt(arrayBars[i].style.height));\n        }\n\n        return completedArray;\n    }\n\n    testSortingAlgorithms() {\n        const jsSortedArray = this.props.array.sort((a, b) => a - b);\n        const quickSorted = Algo.getQuickSortAnimations(this.props.array.slice());\n        console.log(jsSortedArray)\n        console.log(quickSorted)\n        console.log(arraysAreEqual(jsSortedArray, quickSorted));\n    }\n\n    render() {\n        return (\n            <div \n                className=\"canvas\"\n                style={{ backgroundColor: this.props.backgroundColor }}\n                data-test=\"sorting-visualizer\"\n            >\n                <div \n                    className=\"canvas-content\" \n                    data-test=\"content\"\n                    ref={this.componentRef}\n                >\n                    <div \n                        className=\"array-container\"\n                        data-test=\"container\"\n                    >\n                        {this.state[this.componentRef.current].array.map((value,i) => {\n                            return (\n                                <div\n                                    className=\"array-bar\"\n                                    key={i}\n                                    style={{ \n                                        backgroundColor: this.props.defaultColor,\n                                        height: `${value}px`\n                                    }}\n                                ></div>\n                            );\n                        })}\n                        <div \n                            className=\"static-bar\" \n                            data-test=\"static\"\n                            style={{ height: `330px` }}\n                        ></div>\n                    </div>\n                    <div \n                        className=\"algo-bar\"\n                        data-test=\"algorithm-bar\"\n                    >\n                        <button className=\"algo-buttons\" id=\"selectionSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[0])}>SelectionSort</button>\n                        <button className=\"algo-buttons\" id=\"bubbleSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[1])}>BubbleSort</button>\n                        <button className=\"algo-buttons\" id=\"mergeSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[2])}>MergeSort</button>\n                        <button className=\"algo-buttons\" id=\"heapSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[3])}>HeapSort</button>\n                        <button className=\"algo-buttons\" id=\"quickSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[4])}>QuickSort</button>\n                        <button className=\"algo-buttons\" id=\"countingSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[5])}>CountingSort</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    \n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nSortingVisualizer.propTypes = {\n    array: PropTypes.array,\n    startSort: PropTypes.bool,\n    randomAlgoClicks: PropTypes.number,\n    isArraySorted: PropTypes.bool,\n    isDarkTheme: PropTypes.bool,\n    primaryColor: PropTypes.string,\n    secondaryColor: PropTypes.string,\n    sortedColor: PropTypes.string,\n    defaultColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    algoButtonBg: PropTypes.string,\n    algoButtonColor: PropTypes.string,\n    algoButtonSelectedBg: PropTypes.string,\n    algoButtonSelectedColor: PropTypes.string,\n    arraysSorted: PropTypes.number\n};\n\nexport default SortingVisualizer;","import { connect } from 'react-redux';\nimport SortingVisualizer from '../SortingVisualizerX/SortingVisualizer';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    finishSorting: () => {\n      dispatch({\n        type: 'NAV_BAR_FINISH_SORTING'\n      });\n    },\n    incrementArraySortedCount: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_ARRAY_SORTED'\n      });\n    }\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return { \n    array: state.unsortedArray, \n    startSort: state.startSort,\n    randomAlgoClicks: state.randomAlgoClicks,\n    isArraySorted: state.isArraySorted,\n    isDarkTheme: state.isDarkTheme,\n    primaryColor: state.primaryColor,\n    secondaryColor: state.secondaryColor,\n    sortedColor: state.sortedColor,\n    defaultColor: state.defaultColor,\n    backgroundColor: state.backgroundColor,\n    algoButtonBg: state.algoButtonBg,\n    algoButtonColor: state.algoButtonColor,\n    algoButtonSelectedBg: state.algoButtonSelectedBg,\n    algoButtonSelectedColor: state.algoButtonSelectedColor,\n    arraysSorted: state.arraysSorted\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingVisualizer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.startBtnRef = React.createRef();\n        console.log(this.state)\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.finishSorting !== this.props.finishSorting && this.props.finishSorting) {\n            this.startBtnRef.current.style.backgroundColor = \"#59ab80\";\n        }\n    }\n\n    startSorting = () => {\n        if (!this.props.isArraySorted) {\n            this.props.startSort();\n        }\n    }\n\n    handleMouseOverStartBtn = (e) => {\n        if (this.props.finishSorting && !this.props.isArraySorted) {\n            e.target.style.backgroundColor = \"#bd7e7e\"\n            e.target.style.cursor = \"pointer\";\n\n        } else {\n            e.target.style.cursor = \"default\";\n        }\n    }\n\n    handleMouseLeaveStartBtn = (e) => {\n        if (this.props.finishSorting) {\n            e.target.style.backgroundColor = \"#59ab80\";\n        }\n    }\n\n    handleMouseOverBtns = (e) => {\n        if (this.props.finishSorting) {\n            e.target.style.backgroundColor = \"#bd7e7e\";\n            e.target.style.cursor = \"pointer\";\n\n        } else {\n            e.target.style.backgroundColor = \"#59ab80\";\n            e.target.style.cursor = \"default\";\n        }\n    }\n\n    handleMouseLeaveBtns = (e) => {\n        e.target.style.backgroundColor = \"#59ab80\";\n    }\n\n    render() {\n        return (\n            <div \n                className=\"nav-bar\"\n                data-test=\"nav-component\"\n            >\n                <h2\n                    data-test=\"title\"\n                    style={{ color: this.props.titleColor }}\n                >Sorting Visualizer</h2>\n                <button \n                    onClick={() => {\n                        if (this.props.finishSorting) {\n                            this.props.changeTheme()\n                        }\n                    }}\n                    onMouseOver={this.handleMouseOverBtns}\n                    onMouseLeave={this.handleMouseLeaveBtns}\n                >Theme</button>\n                <button \n                    onClick={() => {\n                        if (this.props.finishSorting) {\n                            this.props.randomizeAlgo()\n                        }\n                    }}\n                    onMouseOver={this.handleMouseOverBtns}\n                    onMouseLeave={this.handleMouseLeaveBtns}\n                >Randomize</button>\n                <button \n                    onClick={() => {\n                        if (this.props.finishSorting) {\n                            this.props.shuffleArray()\n                        }\n                    }}\n                    onMouseOver={this.handleMouseOverBtns}\n                    onMouseLeave={this.handleMouseLeaveBtns}\n                >Shuffle</button>\n                <button \n                    ref={this.startBtnRef}\n                    style={{ backgroundColor: this.props.startBtnBg }} \n                    onClick={(e) => {\n                        e.target.style.cursor = \"default\";\n                        this.startSorting();\n                    }}\n                    onMouseOver={this.handleMouseOverStartBtn}\n                    onMouseLeave={this.handleMouseLeaveStartBtn}\n                >Sort</button>\n            </div>\n        );\n    };\n}\n\nNavbar.propTypes = {\n    startSort: PropTypes.func,\n    randomizeAlgo: PropTypes.func,\n    shuffleArray: PropTypes.func,\n    changeTheme: PropTypes.func,\n    titleColor: PropTypes.string,\n    finishSorting: PropTypes.bool,\n    isArraySorted: PropTypes.bool,\n};\n\nexport default Navbar;","import { connect } from 'react-redux';\nimport Navbar from '../SortingVisualizerX/Navbar';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    shuffleArray: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_SHUFFLE_ARRAY'\n      });\n    },\n    randomizeAlgo: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_RANDOMIZE_ALGO'\n      });\n    },\n    startSort: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_START_SORT'\n      });\n    },\n    changeTheme: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_CHANGE_THEME'\n      });\n    }\n  };\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    titleColor: state.titleColor,\n    finishSorting: state.finishSorting,\n    isArraySorted: state.isArraySorted\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import React from 'react';\nimport SortingVisualizerContainer from './containers/SortingVisualizerContainer';\nimport NavbarContainer from './containers/NavbarContainer';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <div \n      className=\"App\"\n      data-test=\"app-component\"\n      style={{ backgroundColor: props.appBackgroundColor }}\n    >\n      <NavbarContainer />\n      <div \n        className=\"grid\"\n        data-test=\"grid-div\"\n      >\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n      </div>      \n    </div>\n  );\n}\n\nApp.propTypes = {\n  appBackgroundColor: PropTypes.string\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../App';\n\nconst mapStateToProps = (state) => {\n  return { \n    appBackgroundColor: state.appBackgroundColor\n  }\n};\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}