{"version":3,"sources":["redux/sortingVisualizerReducer.js","redux/store.js","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizerX/SortingVisualizer.jsx","containers/SortingVisualizerContainer.js","SortingVisualizerX/Navbar.jsx","containers/NavbarContainer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","unsortedArray","shuffleArray","startSort","isArraySorted","randomAlgoClicks","min","max","array","i","push","Math","floor","random","sortingVisualizerReducer","state","action","type","Object","assign","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getHeapSortAnimations","animations","arr","length","k","heapify","heapSort","largest","left","right","getMergeSortAnimations","auxiliaryArray","mergeSort","mainArray","startIdx","endIdx","middleIdx","j","merge","algorithmArray","randomIntFromInterval","SortingVisualizer","props","selectionSort","temp","Algo","componentRef","current","arrayBars","getElementsByClassName","barsIndex","n","setTimeout","barOneIdx","barOneHeight","barTwoIdx","barTwoHeight","barOneStyle","style","barTwoStyle","height","backgroundColor","bubbleSort","sortedNumbers","console","log","color","handleClickAlgoButton","algo","algorithm","highlightAlgoButton","setState","getSortedArray","React","createRef","String","this","prevProps","prevState","error","newHeight","buttons","id","completedArray","parseInt","jsSortedArray","sort","a","b","heapSorted","slice","arrayOne","arrayTwo","arraysAreEqual","className","ref","map","value","key","onClick","Component","connect","Navbar","randomizeAlgo","dispatch","App","NavbarContainer","SortingVisualizerContainer","Boolean","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d4a90f57.chunk.js","sourcesContent":["const NUMBER_OF_ARRAY_BARS = 120;\n\nconst initialState = {\n  unsortedArray: shuffleArray(),\n  startSort: false,\n  isArraySorted: false,\n  randomAlgoClicks: 0\n};\n\nconst sortingVisualizerReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'SORTING_VISUALIZER_SHUFFLE_ARRAY': \n        return Object.assign({}, state, {\n          unsortedArray: shuffleArray(),\n          startSort: false,\n          isArraySorted: false\n        });\n      case 'SORTING_VISUALIZER_RANDOMIZE_ALGO': \n        return Object.assign({}, state, {\n          randomAlgoClicks: state.randomAlgoClicks+1,\n          startSort: false\n      });\n      case 'SORTING_VISUALIZER_START_SORT':\n        return Object.assign({}, state, {\n          startSort: true,\n          isArraySorted: true\n        })      \n      default: \n        return state;\n    }\n  }\n\nfunction shuffleArray() {\n  const array = [];\n\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    array.push(randomIntFromInterval(10, 330));\n  }\n\n  return array;\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n  \nexport default sortingVisualizerReducer;","import { createStore } from 'redux';\nimport sortingVisualizerReducer from './sortingVisualizerReducer';\n\nexport default createStore(\n    sortingVisualizerReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","export function getSelectionSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        let min = i;\n        for(let j = i+1; j < array.length; j++) {\n            animations.push([j,min]);\n            if(array[j] < array[min]) {\n                min = j;\n            }\n        }\n        const temp = array[i];\n        array[i] = array[min];\n        array[min] = temp;\n        animations.push([i, array[i], min, array[min]]);\n    }\n\n    return animations;\n};\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n\n    for(let i = 0; i < array.length - 1; i++) {\n        const sortedNumbers = array.length - 1 - i; \n\n        for(let j = 0; j < sortedNumbers; j++) {\n            animations.push([j,j+1]);\n\n            if(array[j+1] < array[j]) {\n                const temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            } \n            animations.push([j+1, array[j+1], j, array[j]]);\n            animations.push([j,j+1]);\n        }\n        // animations.push([sortedNumbers]);\n    }\n    return animations;\n};\n\nexport function getHeapSortAnimations(array) {\n    const animations = []\n    heapSort(array, animations);\n    return animations;\n}\n\nfunction heapSort(arr, animations) {\n    let i = Math.floor(arr.length / 2 - 1);\n    let k = arr.length - 1;\n    \n    while (i >= 0) {\n        heapify(arr, arr.length, i, animations);\n        i--;\n    }\n\n    while(k >= 0) {\n        [arr[0], arr[k]] = [arr[k], arr[0]];\n        animations.push([k, arr[k], 0, arr[0], 0]);\n        heapify(arr, k, 0, animations);\n        k--;\n    }\n\n    return arr;\n}\n\nfunction heapify(arr, length, i, animations) {\n    let largest = i;\n    let left = i * 2 + 1;\n    let right = left + 1;\n\n    if(left < length && arr[left] > arr[largest]) {\n        largest = left;\n        animations.push([largest, left]);\n    }\n\n    if(right < length && arr[right] > arr[largest]) {\n        largest = right;\n        animations.push([largest, right]);\n    }\n\n    if(largest !== i) {\n        animations.push([largest, arr[i], i, arr[largest]]);\n\n        [arr[i], arr[largest]] = [arr[largest], arr[i]];\n        heapify(arr, length, largest, animations);\n    }\n\n    return arr;\n}\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = [...array];\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n  \nfunction mergeSort(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n  \nfunction merge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n\n    if((mainArray.length - 1) === endIdx && 0 === startIdx) {\n        while (i <= middleIdx && j <= endIdx) {            \n            animations.push([i, j, 0]);\n            animations.push([i, j, 0]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i], 0]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j], 0]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i, 0]);\n            animations.push([i, i, 0]);\n            animations.push([k, auxiliaryArray[i], 0]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j, 0]);\n            animations.push([j, j, 0]);\n            animations.push([k, auxiliaryArray[j], 0]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    } else {\n        while (i <= middleIdx && j <= endIdx) {\n            animations.push([i, j]);\n            animations.push([i, j]);\n    \n            if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n                animations.push([k, auxiliaryArray[i]]);\n                mainArray[k++] = auxiliaryArray[i++];\n    \n            } else {\n                animations.push([k, auxiliaryArray[j]]);\n                mainArray[k++] = auxiliaryArray[j++];\n            }\n        }\n    \n        while (i <= middleIdx) {\n            animations.push([i, i]);\n            animations.push([i, i]);\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        }\n        \n        while (j <= endIdx) {\n            animations.push([j, j]);\n            animations.push([j, j]);\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }    \n    \n}\n  ","import React, { Component } from 'react';\nimport * as Algo from '../sortingAlgorithms/sortingAlgorithms';\nimport './SortingVisualizer.css';\n\nconst algorithmArray = ['selectionSort', 'bubbleSort', 'mergeSort', 'heapSort'];\nconst NUMBER_OF_ARRAY_BARS = 120; // for testing\nconst ANIMATION_SPEED_MS = 2;\nconst PRIMARY_COLOR = 'darkkhaki';\nconst SECONDARY_COLOR = 'tomato';\nconst SORTED_COLOR = 'deepskyblue';\nconst DEFAULT_COLOR = 'grey';\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.componentRef = React.createRef();\n        this.componentRef.current = randomIntFromInterval(0, 1000000);\n        this.state = {\n            [this.componentRef.current]: {\n                array: [],\n                algorithm: String\n            }\n        };\n    }\n    \n    componentDidMount() {\n        const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n        // the array from this.props is copied into this component's state.\n        this.setState({            \n            [this.componentRef.current]: {\n                array: [...this.props.array],\n                algorithm\n            }\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.array !== this.props.array) {\n            // this.testSortingAlgorithms();\n            const node = this.componentRef.current;\n            const arrayBars = node.getElementsByClassName('array-bar');\n\n            for(let i = 0; i < arrayBars.length; i++) {\n                arrayBars[i].style.backgroundColor = DEFAULT_COLOR;\n            }\n            const shuffleArray = [...this.props.array];\n\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: shuffleArray,\n                    algorithm: prevState[this.componentRef.current].algorithm\n                }\n            });   \n        }\n\n        if(prevProps.randomAlgoClicks !== this.props.randomAlgoClicks) {\n            const algorithm = this.highlightAlgoButton(algorithmArray[randomIntFromInterval(0,algorithmArray.length-1)]);\n\n            if(this.props.isArraySorted) {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: this.getSortedArray(),\n                        algorithm\n                    }\n                }); \n            } else {\n                this.setState({            \n                    [this.componentRef.current]: {\n                        array: [...this.props.array],\n                        algorithm\n                    }\n                }); \n            }            \n        }\n\n        if(prevProps.startSort !== this.props.startSort && this.props.startSort) {\n            switch(this.state[this.componentRef.current].algorithm) {\n                case algorithmArray[0]:\n                    this.selectionSort();\n                    break;\n                case algorithmArray[1]:\n                    this.bubbleSort();\n                    break;\n                case algorithmArray[2]:\n                    this.mergeSort();\n                    break;\n                case algorithmArray[3]:\n                    this.heapSort();\n                    break;\n                default:\n                    console.error('no algorithm selected')\n            }\n        }\n    }\n\n    selectionSort = () => {\n        const animations = Algo.getSelectionSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let barsIndex = 0, n = 0;\n        \n        for(let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 4) {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    setTimeout(() => {                            \n                        const barStyle = arrayBars[barsIndex++].style;\n                        barStyle.backgroundColor = SORTED_COLOR;\n                    }, ANIMATION_SPEED_MS); \n\n                    if(++n === 119) {\n                        setTimeout(() => {\n                            const barStyle = arrayBars[n].style;\n                            barStyle.backgroundColor = SORTED_COLOR;\n                        }, ANIMATION_SPEED_MS);  \n                    }     \n                }, i * ANIMATION_SPEED_MS);\n\n            } else {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = PRIMARY_COLOR;\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;                    \n                    }, ANIMATION_SPEED_MS);\n                }, i * ANIMATION_SPEED_MS);                \n            }\n        }\n    }\n\n    bubbleSort = () => {\n        const animations = Algo.getBubbleSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        let isColorChange, n = 119, barsIndex = 119; // 249\n        console.log(animations.length);\n\n        for (let i = 0; i < animations.length; i++) {\n            isColorChange = i % 3 !== 1;\n\n            if (isColorChange) { // every 1st and 3rd. Eg. 0, 2, 3, 5, 6, 8\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 !== 2 ? SECONDARY_COLOR : PRIMARY_COLOR; // 1st true, 2nd and 3rd false (3rd don't execute)\n                \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS / 3);\n\n            } else { // every 2nd                 \n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;  \n\n                    if(barTwoIdx === n || barOneIdx === n) {\n                        setTimeout(() => {                            \n                            const barStyle = arrayBars[barsIndex--].style;\n                            barStyle.backgroundColor = SORTED_COLOR;\n                        }, ANIMATION_SPEED_MS);     \n\n                        if(--n === 0) {\n                            setTimeout(() => {\n                                const barStyle = arrayBars[0].style;\n                                barStyle.backgroundColor = SORTED_COLOR;\n                            }, ANIMATION_SPEED_MS);   \n                        }\n                    }                \n                }, i * ANIMATION_SPEED_MS/3);                \n            }\n        }\n    }\n\n    // bubbleSort = () => {\n    //     const animations = Algo.getBubbleSortAnimations(this.state[this.componentRef.current].array);\n    //     const node = this.componentRef.current;\n    //     const arrayBars = node.getElementsByClassName('array-bar');\n    //     console.log(animations.length);\n\n    //     for (let i = 0; i < animations.length; i++) {\n    //         if(animations[i].length === 2) {               \n    //             setTimeout(() => {\n    //                 const [barOneIdx, barTwoIdx] = animations[i];\n    //                 const barOneStyle = arrayBars[barOneIdx].style;\n    //                 const barTwoStyle = arrayBars[barTwoIdx].style;\n    //                 barOneStyle.backgroundColor = SECONDARY_COLOR;\n    //                 barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n    //                 setTimeout(() => {\n    //                     barOneStyle.backgroundColor = PRIMARY_COLOR;\n    //                     barTwoStyle.backgroundColor = PRIMARY_COLOR;\n    //                 }, 5);                    \n    //             }, i * ANIMATION_SPEED_MS * 2);\n\n    //         } else if(animations[i].length === 4) {                \n    //             setTimeout(() => {            \n    //                 const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i];\n    //                 const barOneStyle = arrayBars[barOneIdx].style;\n    //                 const barTwoStyle = arrayBars[barTwoIdx].style;\n    //                 barOneStyle.height = `${barOneHeight}px`;\n    //                 barTwoStyle.height = `${barTwoHeight}px`;  \n    //                 barOneStyle.backgroundColor = SECONDARY_COLOR;\n    //                 barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n    //                     setTimeout(() => {                            \n    //                         barOneStyle.backgroundColor = PRIMARY_COLOR;\n    //                         barTwoStyle.backgroundColor = PRIMARY_COLOR;\n    //                     }, 5);\n    //             }, i * ANIMATION_SPEED_MS * 2);\n\n    //         } else {               \n    //             setTimeout(() => {\n    //                 const [barOneIdx] = animations[i];\n    //                 const barOneStyle = arrayBars[barOneIdx].style;\n    //                 barOneStyle.backgroundColor = SORTED_COLOR;\n    //             }, i * ANIMATION_SPEED_MS * 2.05 + 10);\n    //         }            \n    //     }\n    // }\n\n    mergeSort() {\n        const animations = Algo.getMergeSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = i % 3 !== 2; // 1st and 2nd true, 3rd false\n\n            if (isColorChange) { // 1st and 2nd [i] processed\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR; // 1st true, 2nd and 3rd false (3rd don't execute)                \n\n                if(animations[i].length !== 3) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * ANIMATION_SPEED_MS * 3);\n\n                } else {\n                    const [barOneIdx] = animations[i]; \n                    const barOneStyle = arrayBars[barOneIdx].style;\n\n                    setTimeout(() => {                    \n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }, i * ANIMATION_SPEED_MS * 3);    \n                }\n\n            } else { // every 3rd i \n                const [barOneIdx, newHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                \n                setTimeout(() => {                    \n                    barOneStyle.height = `${newHeight}px`;\n\n                    if(animations[i].length === 3) {\n                        setTimeout(() => {                    \n                            barOneStyle.backgroundColor = SORTED_COLOR;\n                        }, 0);    \n                    }\n                }, i * ANIMATION_SPEED_MS * 3);              \n            }\n        }\n    }\n\n    heapSort() {\n        const animations = Algo.getHeapSortAnimations(this.state[this.componentRef.current].array);\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n\n        for (let i = 0; i < animations.length; i++) {\n            if(animations[i].length === 2) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = PRIMARY_COLOR;\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                    }, 10);\n                }, i * ANIMATION_SPEED_MS * 4.7);\n                \n            } else if(animations[i].length === 4) {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    \n                    barOneStyle.backgroundColor = SECONDARY_COLOR;                  \n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;\n\n                    setTimeout(() => {   \n                        barOneStyle.height = `${barOneHeight}px`;\n                        barTwoStyle.height = `${barTwoHeight}px`;                      \n                        barOneStyle.backgroundColor = PRIMARY_COLOR;                  \n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;\n                    }, 10)\n                }, i * ANIMATION_SPEED_MS * 4.7); \n\n            } else {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight] = animations[i]; \n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;                 \n\n                setTimeout(() => {         \n                    barOneStyle.height = `${barOneHeight}px`;\n                    barTwoStyle.height = `${barTwoHeight}px`;\n                    barOneStyle.backgroundColor = SORTED_COLOR;     \n                    barTwoStyle.backgroundColor = SECONDARY_COLOR;  \n\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR;  \n                    }, 10) \n\n                    if(i === animations.length - 1) {\n                        setTimeout(() => {\n                            arrayBars[0].style.backgroundColor = SORTED_COLOR;   \n                        }, 10) \n                    }   \n                }, i * ANIMATION_SPEED_MS * 4.75); \n            }            \n        }\n      }\n\n    highlightAlgoButton(algorithm) {\n        const node = this.componentRef.current;\n        const buttons = node.getElementsByClassName('algo-buttons');\n\n        for(let i = 0; i < buttons.length; i++) {\n            if(algorithm === buttons[i].id){\n                buttons[i].style.color = '#ffffff';\n                buttons[i].style.backgroundColor = '#f6b93b';\n            } else {\n                buttons[i].style.color = '#494949';\n                buttons[i].style.backgroundColor = '#ffffff';\n            }\n        }        \n\n        return algorithm;\n    }\n\n    handleClickAlgoButton = (algo) => {\n        const algorithm = this.highlightAlgoButton(algo);\n\n        if(this.props.isArraySorted) {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: this.getSortedArray(),\n                    algorithm\n                }\n            });            \n        } else {\n            this.setState({            \n                [this.componentRef.current]: {\n                    array: [...this.props.array],\n                    algorithm\n                }\n            });\n        }\n    }\n\n    getSortedArray() {\n        const node = this.componentRef.current;\n        const arrayBars = node.getElementsByClassName('array-bar');\n        const completedArray = [];\n\n        for(let i = 0; i < arrayBars.length; i++) {\n            completedArray.push(parseInt(arrayBars[i].style.height));\n        }\n\n        return completedArray;\n    }\n\n    testSortingAlgorithms() {\n        const jsSortedArray = this.props.array.sort((a, b) => a - b);\n        // const bubbleSorted = Algo.getBubbleSortAnimations(this.props.array.slice());\n        // const selectionSorted = Algo.getSelectionSortAnimations(this.props.array.slice());\n        // const mergeSorted = Algo.getMergeSortAnimations(this.props.array.slice());\n        const heapSorted = Algo.getHeapSortAnimations(this.props.array.slice());\n\n        console.log(jsSortedArray)\n        // console.log(bubbleSorted.length)\n        // console.log(selectionSorted.length)\n        // console.log(mergeSorted.length)\n        console.log(heapSorted)\n\n\n        console.log(arraysAreEqual(jsSortedArray, heapSorted));\n      }\n\n    render() {\n        return (\n            <div className=\"canvas\">\n                <div className=\"canvas-content\" ref={this.componentRef}>\n                    <div className=\"array-container\">\n                        {this.state[this.componentRef.current].array.map((value,i) => {\n                            return (\n                            <div\n                                className=\"array-bar\"\n                                key={i}\n                                style={{ \n                                    backgroundColor: DEFAULT_COLOR,\n                                    height: `${value}px`\n                                }}\n                            ></div>);\n                        })}\n                        <div className=\"static-bar\" style={{ height: `330px` }}></div>\n                    </div>\n                    <div className=\"algo-bar\">\n                        <button className=\"algo-buttons\" id=\"selectionSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[0])}>SelectionSort</button>\n                        <button className=\"algo-buttons\" id=\"bubbleSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[1])}>BubbleSort</button>\n                        <button className=\"algo-buttons\" id=\"mergeSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[2])}>MergeSort</button>\n                        <button className=\"algo-buttons\" id=\"heapSort\" onClick={() => this.handleClickAlgoButton(algorithmArray[3])}>HeapSort</button>\n                        <button className=\"algo-buttons\" >QuickSort</button>\n                        <button className=\"algo-buttons\" >... Sort</button>\n                        <button className=\"algo-buttons\" >... Sort</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nexport default SortingVisualizer;","import { connect } from 'react-redux';\nimport SortingVisualizer from '../SortingVisualizerX/SortingVisualizer';\n\nconst mapStateToProps = (state) => {\n  return { \n    array: state.unsortedArray, \n    startSort: state.startSort,\n    randomAlgoClicks: state.randomAlgoClicks,\n    isArraySorted: state.isArraySorted\n  }\n};\n\nexport default connect(mapStateToProps)(SortingVisualizer);","import React from 'react';\nimport './Navbar.css';\n\nfunction Navbar(props) {\n    return (\n        <div className=\"nav-bar\">\n            <h2>Sorting Visualizer X</h2>\n            <button onClick={() => props.startSort()}>Start</button>\n            <button onClick={() => props.randomizeAlgo()}>Randomize Algorithms</button>\n            <button onClick={() => props.shuffleArray()}>Shuffle</button>\n            <button>Theme</button>\n        </div>\n    );    \n}\n\nexport default Navbar;","import { connect } from 'react-redux';\nimport Navbar from '../SortingVisualizerX/Navbar';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    shuffleArray: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_SHUFFLE_ARRAY'\n      });\n    },\n    randomizeAlgo: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_RANDOMIZE_ALGO'\n      });\n    },\n    startSort: () => {\n      dispatch({\n        type: 'SORTING_VISUALIZER_START_SORT'\n      });\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Navbar);\n","import React from 'react';\nimport SortingVisualizerContainer from './containers/SortingVisualizerContainer';\nimport NavbarContainer from './containers/NavbarContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarContainer />\n      <div className=\"grid\">\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n        <SortingVisualizerContainer />\n      </div>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}